<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_u_a_r_t001_8c" kind="file">
    <compoundname>UART001.c</compoundname>
    <includes refid="_u_a_r_t001_8h" local="yes">../../inc/UART001/UART001.h</includes>
    <includes refid="_r_e_s_e_t001_8h" local="yes">../../inc/RESET001/RESET001.h</includes>
    <incdepgraph>
      <node id="982">
        <label>XMC4500.h</label>
      </node>
      <node id="986">
        <label>UART001_Conf.h</label>
        <link refid="_u_a_r_t001___conf_8h"/>
      </node>
      <node id="978">
        <label>UART001.c</label>
        <link refid="UART001.c"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
      </node>
      <node id="984">
        <label>stdint.h</label>
      </node>
      <node id="985">
        <label>stddef.h</label>
      </node>
      <node id="980">
        <label>Usic.h</label>
        <link refid="_usic_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="983">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
      </node>
      <node id="981">
        <label>uc_id.h</label>
      </node>
      <node id="979">
        <label>../../inc/UART001/UART001.h</label>
        <link refid="_u_a_r_t001_8h"/>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
      </node>
      <node id="987">
        <label>UART001_Extern.h</label>
        <link refid="_u_a_r_t001___extern_8h"/>
      </node>
      <node id="988">
        <label>../../inc/RESET001/RESET001.h</label>
        <link refid="_r_e_s_e_t001_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_u_a_r_t001_8c_1a35321989a23a4463d1343b664a21ae5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_ClearFlag</definition>
        <argsstring>(const UART001_HandleType *Handle, UART001_FlagStatusType Flag)</argsstring>
        <name>UART001_ClearFlag</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549" kindref="member">UART001_FlagStatusType</ref></type>
          <declname>Flag</declname>
        </param>
        <briefdescription>
<para>This function clears the specified event flag status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Flag</parametername>
</parameternamelist>
<parameterdescription>
<para>UART Flag which needs to be cleared</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa7f214e950857a0d68f37e90dd862aa98" kindref="member">UART001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint16_t<sp/>Data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialises<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1ad82dcdca5a7770f4524e1527de95407b" kindref="member" tooltip="Function which allows changing of baud rate, parity &amp;amp; stop bit configuration at run time...">UART001_Configure</ref>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;UART001_Handle0,19200,<ref refid="_usic_8h_1a133d537c1f7e5042967df4115c53dcbead908a637b1dd23f93b149dd2d8bdfdb8" kindref="member">UART_PARITY_EVEN</ref>,<ref refid="_usic_8h_1a29edaab5c24304a4b92bc53f8fa4ca56aefa59a66582bfd03fc2e8ab588d0c8fb" kindref="member">UART_ONE_STOPBIT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uart<sp/>channel<sp/>reconfiguration<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>standard<sp/>receive<sp/>buffer<sp/>event<sp/>is<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((<ref refid="_u_a_r_t001_8h_1a1f522695783cf883fb6139028b844116" kindref="member" tooltip="The function is used to get the event flag status specified. It returns UART_SET if the corresponding...">UART001_GetFlagStatus</ref>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;UART001_Handle0,<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>))!=<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49faf7efa6890500ca0bde8d20fefb82b37b" kindref="member">UART001_SET</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Read<sp/>Receive<sp/>FIFO<sp/>buffer<sp/>till<sp/>the<sp/>buffer<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Data<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a772c0f770e3b9850af3f1edecd529c83" kindref="member" tooltip="Macro which reads a data word from the receive FIFO buffer register.">UART001_ReadData</ref>(UART001_Handle0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t001_8h_1a35321989a23a4463d1343b664a21ae5f" kindref="member" tooltip="This function clears the specified event flag status.">UART001_ClearFlag</ref>(&amp;UART001_Handle0,<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Data<sp/>==<sp/>0x43)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Checking<sp/>the<sp/>data<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="1037" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="1033" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1ad82dcdca5a7770f4524e1527de95407b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t UART001_Configure</definition>
        <argsstring>(const UART001_HandleType *Handle, uint32_t BaudRate, UART_ParityType Parity, UART_StopBitType Stopbit)</argsstring>
        <name>UART001_Configure</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>BaudRate</declname>
        </param>
        <param>
          <type><ref refid="_usic_8h_1a133d537c1f7e5042967df4115c53dcbe" kindref="member">UART_ParityType</ref></type>
          <declname>Parity</declname>
        </param>
        <param>
          <type><ref refid="_usic_8h_1a29edaab5c24304a4b92bc53f8fa4ca56" kindref="member">UART_StopBitType</ref></type>
          <declname>Stopbit</declname>
        </param>
        <briefdescription>
<para>Function which allows changing of baud rate, parity &amp; stop bit configuration at run time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">BaudRate</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired Baud Rate in Bauds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Parity</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired Parity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Stopbit</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired no of Stop bit(s)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status <linebreak/>
 DAVEApp_SUCCESS : for success.<linebreak/>
 UART001_ERROR : for failure case.<linebreak/>
 UART001_BUSY : UART channel is busy.<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa7f214e950857a0d68f37e90dd862aa98" kindref="member">UART001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initialises<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1ad82dcdca5a7770f4524e1527de95407b" kindref="member" tooltip="Function which allows changing of baud rate, parity &amp;amp; stop bit configuration at run time...">UART001_Configure</ref>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;UART001_Handle0,19200,<ref refid="_usic_8h_1a133d537c1f7e5042967df4115c53dcbead908a637b1dd23f93b149dd2d8bdfdb8" kindref="member">UART_PARITY_EVEN</ref>,<ref refid="_usic_8h_1a29edaab5c24304a4b92bc53f8fa4ca56aefa59a66582bfd03fc2e8ab588d0c8fb" kindref="member">UART_ONE_STOPBIT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uart<sp/>channel<sp/>reconfiguration<sp/>successful<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="688" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="682" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a6183750fd097791ba69205ed360e6537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_DeInit</definition>
        <argsstring>(const UART001_HandleType *Handle)</argsstring>
        <name>UART001_DeInit</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
<para>This function de-initialises the USIC channel configurations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters. <programlisting><codeline><highlight class="preprocessor"><sp/>#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_u_a_r_t001_8h_1a6183750fd097791ba69205ed360e6537" kindref="member" tooltip="This function de-initialises the USIC channel configurations.">UART001_DeInit</ref>(&amp;UART001_Handle0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="659" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="658" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a1f522695783cf883fb6139028b844116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t UART001_GetFlagStatus</definition>
        <argsstring>(const UART001_HandleType *Handle, UART001_FlagStatusType Flag)</argsstring>
        <name>UART001_GetFlagStatus</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549" kindref="member">UART001_FlagStatusType</ref></type>
          <declname>Flag</declname>
        </param>
        <briefdescription>
<para>The function is used to get the event flag status specified. It returns UART_SET if the corresponding flag is set else otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Flag</parametername>
</parameternamelist>
<parameterdescription>
<para>UART Flag which needs to be checked</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t <linebreak/>
 UART_SET : indicates Flag is set.<linebreak/>
 UART_RESET : indicates Flag is reset.<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa7f214e950857a0d68f37e90dd862aa98" kindref="member">UART001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint16_t<sp/>Data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialises<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1ad82dcdca5a7770f4524e1527de95407b" kindref="member" tooltip="Function which allows changing of baud rate, parity &amp;amp; stop bit configuration at run time...">UART001_Configure</ref>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;UART001_Handle0,19200,<ref refid="_usic_8h_1a133d537c1f7e5042967df4115c53dcbead908a637b1dd23f93b149dd2d8bdfdb8" kindref="member">UART_PARITY_EVEN</ref>,<ref refid="_usic_8h_1a29edaab5c24304a4b92bc53f8fa4ca56aefa59a66582bfd03fc2e8ab588d0c8fb" kindref="member">UART_ONE_STOPBIT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uart<sp/>channel<sp/>reconfiguration<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>standard<sp/>receive<sp/>buffer<sp/>event<sp/>is<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((<ref refid="_u_a_r_t001_8h_1a1f522695783cf883fb6139028b844116" kindref="member" tooltip="The function is used to get the event flag status specified. It returns UART_SET if the corresponding...">UART001_GetFlagStatus</ref>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;UART001_Handle0,<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>))!=<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49faf7efa6890500ca0bde8d20fefb82b37b" kindref="member">UART001_SET</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Read<sp/>Receive<sp/>FIFO<sp/>buffer<sp/>till<sp/>the<sp/>buffer<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Data<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a772c0f770e3b9850af3f1edecd529c83" kindref="member" tooltip="Macro which reads a data word from the receive FIFO buffer register.">UART001_ReadData</ref>(UART001_Handle0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t001_8h_1a35321989a23a4463d1343b664a21ae5f" kindref="member" tooltip="This function clears the specified event flag status.">UART001_ClearFlag</ref>(&amp;UART001_Handle0,<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Data<sp/>==<sp/>0x43)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Checking<sp/>the<sp/>data<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="988" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="984" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a8b7f345b2f36c2ce54e21319196674a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_Init</definition>
        <argsstring>(void)</argsstring>
        <name>UART001_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initialises the App, based on User provided configuration. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold> <linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters. <programlisting><codeline><highlight class="preprocessor"><sp/>#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initialises<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();<sp/></highlight><highlight class="comment">//<sp/>UART001_Init()<sp/>will<sp/>be<sp/>called<sp/>inside<sp/>DAVE_Init()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="585" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="584" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a853d7e5e26c524f34daf2b32433ba65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float UART001_labsRealType</definition>
        <argsstring>(float Number)</argsstring>
        <name>UART001_labsRealType</name>
        <param>
          <type>float</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="186" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="400" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1ad710641ab73ab4f7d5340dd454582105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_lConfigTXPin</definition>
        <argsstring>(const UART001_HandleType *Handle)</argsstring>
        <name>UART001_lConfigTXPin</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="181" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="346" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1ab38fb3a3fb4e1c90d6b606d301273231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_lConfigureBaudRate</definition>
        <argsstring>(uint32_t BaudRate, uint32_t *Pdiv, uint32_t *Step)</argsstring>
        <name>UART001_lConfigureBaudRate</name>
        <param>
          <type>uint32_t</type>
          <declname>BaudRate</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>Pdiv</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>Step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="184" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="424" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a9b0034e6b6d6d69c6fa7b06546d8cb6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART001_lInit</definition>
        <argsstring>(const UART001_HandleType *Handle)</argsstring>
        <name>UART001_lInit</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>UART initialisation </para>        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="179" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="215" bodyend="335"/>
        <referencedby refid="_u_a_r_t001_8c_1a8b7f345b2f36c2ce54e21319196674a8" compoundref="_u_a_r_t001_8c" startline="584" endline="647">UART001_Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a190d4530caf26cdf2c6be3567299050f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t UART001_ReadDataBytes</definition>
        <argsstring>(const UART001_HandleType *Handle, uint8_t *DataPtr, uint32_t Count)</argsstring>
        <name>UART001_ReadDataBytes</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>DataPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
<para>When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, byte by byte, until there is no data in the FIFO buffer and the &quot;Count&quot; value is greater than &quot;0&quot;. But when receive FIFO buffer is disabled, it reads a byte from standard receive buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">DataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Count</parametername>
</parameternamelist>
<parameterdescription>
<para>Total no of bytes to be read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Number of data read from FIFO/standard receive buffer <linebreak/>
</para></simplesect>
<emphasis>Imp Note:</emphasis> Return Count will be always &apos;1&apos;, if data is read from the standard buffer.</para><para><bold>Reentrant: NO </bold><linebreak/>
</para><para><bold>Note</bold>: FIFO trigger limit should be adjusted manually in the UI based on the number of data&apos;s to be buffered.</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer enabled). <linebreak/>
<emphasis><bold>UART001_Handle1</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer disabled). <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>FifoReaddata[11];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>StdReaddata[11];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>from<sp/>FIFO<sp/>buffer<sp/>when<sp/>FIFO<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecvFifoHandler()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t001_8h_1a190d4530caf26cdf2c6be3567299050f" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, byte by byte...">UART001_ReadDataBytes</ref>(&amp;UART001_Handle0,FifoReaddata,11);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>byte<sp/>from<sp/>standard<sp/>buffer<sp/>when<sp/>FIFO<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecvStdBuffHandler()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="_u_a_r_t001_8h_1a190d4530caf26cdf2c6be3567299050f" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, byte by byte...">UART001_ReadDataBytes</ref>(&amp;UART001_Handle1,&amp;StdReaddata[count],1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="828" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="823" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1acf8ad779c2b8cdcf5e55dabff2e6ce04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t UART001_ReadDataMultiple</definition>
        <argsstring>(const UART001_HandleType *Handle, uint16_t *DataPtr, uint32_t Count)</argsstring>
        <name>UART001_ReadDataMultiple</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>DataPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
<para>When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, word by word, until there is no data in the FIFO buffer and the &quot;Count&quot; value is greater than &quot;0&quot;. But when receive FIFO buffer is disabled, it reads a word from standard receive buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">DataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Count</parametername>
</parameternamelist>
<parameterdescription>
<para>Total no of words to be read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Number of data read from FIFO/standard receive buffer <linebreak/>
</para></simplesect>
<emphasis>Imp Note:</emphasis> Return Count will be always &apos;1&apos;, if data is read from the standard buffer.</para><para><bold>Reentrant: NO </bold><linebreak/>
</para><para><bold>Note</bold>: FIFO trigger limit should be adjusted manually in the UI based on the number of data&apos;s to be buffered.</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer enabled). <linebreak/>
<emphasis><bold>UART001_Handle1</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer disabled). <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>FifoReaddata[11];</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>StdReaddata[11];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>from<sp/>FIFO<sp/>buffer<sp/>when<sp/>FIFO<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecvFifoHandler()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t001_8h_1acf8ad779c2b8cdcf5e55dabff2e6ce04" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, word by word...">UART001_ReadDataMultiple</ref>(&amp;UART001_Handle0,FifoReaddata,11);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>byte<sp/>from<sp/>standard<sp/>buffer<sp/>when<sp/>FIFO<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecvStdBuffHandler()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>count;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="_u_a_r_t001_8h_1acf8ad779c2b8cdcf5e55dabff2e6ce04" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, word by word...">UART001_ReadDataMultiple</ref>(&amp;UART001_Handle1,&amp;StdReaddata[count],1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="776" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="771" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a8f18b90baea892eaeb3a6bb7aa74d5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t UART001_WriteDataBytes</definition>
        <argsstring>(const UART001_HandleType *Handle, const uint8_t *DataPtr, uint32_t Count)</argsstring>
        <name>UART001_WriteDataBytes</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>DataPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
<para>When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, byte by byte, until the FIFO buffer is full and the &quot;Count&quot; value is greater than &quot;0&quot;. But when transmit FIFO is disabled, it writes a byte to the standard transmit buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Reentrant : No</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Count</parametername>
</parameternamelist>
<parameterdescription>
<para>Total no of words to be transmitted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Number of data written to buffer <linebreak/>
</para></simplesect>
<emphasis>Imp Note:</emphasis> Return Count will be always &apos;1&apos;, if data is written to the standard buffer.</para><para><bold>Reentrant: NO </bold><linebreak/>
</para><para><bold>Note</bold>: FIFO trigger limit should be adjusted manually in the UI based on the number of data&apos;s to be buffered.</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters(additional FIFO buffer enabled). <linebreak/>
<emphasis><bold>UART001_Handle1</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters(additional FIFO buffer disabled). <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint32_t<sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>data[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HELLO<sp/>WORLD&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>data1[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>&quot;HELLO<sp/>WORLD&quot;<sp/>to<sp/>PC<sp/>hyper<sp/>terminal<sp/>using<sp/>Tx<sp/>FIFO<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a8f18b90baea892eaeb3a6bb7aa74d5db" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, byte by byte, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a byte to the standard transmit buffer.">UART001_WriteDataBytes</ref>(&amp;UART001_Handle0,<sp/>&amp;data[0],<sp/>11);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>11)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>transmitted</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//Send<sp/>&quot;hello<sp/>world&quot;<sp/>to<sp/>PC<sp/>hyper<sp/>terminal<sp/>using<sp/>Tx<sp/>standard<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(count=0;<sp/>count&lt;11;<sp/>count++)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="_u_a_r_t001_8h_1a8f18b90baea892eaeb3a6bb7aa74d5db" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, byte by byte, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a byte to the standard transmit buffer.">UART001_WriteDataBytes</ref>(&amp;UART001_Handle1,<sp/>&amp;data1[count],<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="939" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="934" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t001_8c_1a61fdfc06efab866a051222c2b20d1431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t UART001_WriteDataMultiple</definition>
        <argsstring>(const UART001_HandleType *Handle, uint16_t *DataPtr, uint32_t Count)</argsstring>
        <name>UART001_WriteDataMultiple</name>
        <param>
          <type>const <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>DataPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
<para>When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, word by word, until the FIFO buffer is full and the &quot;Count&quot; value is greater than &quot;0&quot;. But when transmit FIFO is disabled, it writes a word to the standard transmit buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Reentrant : No</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Count</parametername>
</parameternamelist>
<parameterdescription>
<para>Total no of words to be transmitted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Number of data written to buffer <linebreak/>
</para></simplesect>
<emphasis>Imp Note:</emphasis> Return Count will be always &apos;1&apos;, if data is written to the standard buffer.</para><para><bold>Reentrant: NO </bold><linebreak/>
</para><para><bold>Note</bold>: FIFO trigger limit should be adjusted manually in the UI based on the number of data&apos;s to be buffered.</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>UART001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer enabled). <linebreak/>
<emphasis><bold>UART001_Handle1</bold></emphasis> is a global structure of type <ref refid="struct_u_a_r_t001___handle_type" kindref="compound">UART001_HandleType</ref> which will be configured in <ref refid="_u_a_r_t001___conf_8c" kindref="compound">UART001_Conf.c</ref> file using UI parameters (additional FIFO buffer disabled). <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint32_t<sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint32_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>data[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;H<sp/>E<sp/>L<sp/>L<sp/>O<sp/><sp/><sp/>W<sp/>O<sp/>R<sp/>L<sp/>D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/>uint8_t<sp/>data1[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;h<sp/>e<sp/>l<sp/>l<sp/>o<sp/><sp/>w<sp/>o<sp/>r<sp/>l<sp/>d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>hello<sp/>world<sp/>to<sp/>PC<sp/>hyper<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>status<sp/>=<sp/><ref refid="_u_a_r_t001_8h_1a61fdfc06efab866a051222c2b20d1431" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, word by word, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a word to the standard transmit buffer.">UART001_WriteDataMultiple</ref>(&amp;UART001_Handle0,<sp/>(uint16_t*)&amp;data[0],<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data)/2);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>==<sp/>11)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>transmitted</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//Send<sp/>&quot;hello<sp/>world&quot;<sp/>to<sp/>PC<sp/>hyper<sp/>terminal<sp/>using<sp/>Tx<sp/>standard<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(count=0;<sp/>count&lt;11;<sp/>count++)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="_u_a_r_t001_8h_1a61fdfc06efab866a051222c2b20d1431" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, word by word, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a word to the standard transmit buffer.">UART001_WriteDataMultiple</ref>(&amp;UART001_Handle1,<sp/>&amp;data1[count],<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" line="882" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="877" bodyend="907"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>UART001 App provides non reentrant APIs for higher level Apps which can be used in a Non -RTOS environment. Limitations of Simple UART App a) Read/Write functions are non reentrant. b) No support for DMA mode. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2014,<sp/>Infineon<sp/>Technologies<sp/>AG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>modification,are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holders<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/><sp/>**</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>ARE<sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>LIABLE<sp/><sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/><sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>To<sp/>improve<sp/>the<sp/>quality<sp/>of<sp/>the<sp/>software,<sp/>users<sp/>are<sp/>encouraged<sp/>to<sp/>share<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>modifications,<sp/>enhancements<sp/>or<sp/>bug<sp/>fixes<sp/>with<sp/>Infineon<sp/>Technologies<sp/>AG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>dave@infineon.com).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="33"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="36"><highlight class="comment">**<sp/>PLATFORM<sp/>:<sp/>Infineon<sp/>XMC4000/<sp/>XMC1000<sp/>Series<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="37"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="38"><highlight class="comment">**<sp/>COMPILER<sp/>:<sp/>Compiler<sp/>Independent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="39"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="40"><highlight class="comment">**<sp/>AUTHOR<sp/><sp/><sp/>:<sp/>App<sp/>Developer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="41"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="42"><highlight class="comment">**<sp/>MAY<sp/>BE<sp/>CHANGED<sp/>BY<sp/>USER<sp/>[yes/no]:<sp/>Yes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="43"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="44"><highlight class="comment">**<sp/>MODIFICATION<sp/>DATE<sp/>:<sp/>Apr<sp/>11,<sp/>2014<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="45"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="46"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="47"><highlight class="comment">**<sp/>VERSION<sp/>HISTORY:</highlight></codeline>
<codeline lineno="48"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="49"><highlight class="comment">**<sp/>04<sp/>Dec<sp/>2012<sp/>v1.0.4<sp/><sp/>Changes<sp/>from<sp/>1.0.2<sp/>are</highlight></codeline>
<codeline lineno="50"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Modified<sp/>for<sp/>baud<sp/>calculation<sp/>during<sp/>initialisation.</highlight></codeline>
<codeline lineno="51"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Modified<sp/>the<sp/>macros<sp/>FUNCTION_ENTRY,<sp/>FUNCTION_EXIT<sp/>and</highlight></codeline>
<codeline lineno="52"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERROR</highlight></codeline>
<codeline lineno="53"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>The<sp/>hard<sp/>coded<sp/>values<sp/>are<sp/>replaced<sp/>with<sp/>macros<sp/>in</highlight></codeline>
<codeline lineno="54"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_lConfigureBaudRate()<sp/>function.</highlight></codeline>
<codeline lineno="55"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>The<sp/>PCTQ<sp/>value<sp/>update<sp/>in<sp/>BRG<sp/>register<sp/>is<sp/>removed<sp/>as</highlight></codeline>
<codeline lineno="56"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>value<sp/>is<sp/>taken<sp/>as<sp/>zero.</highlight></codeline>
<codeline lineno="57"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>Modified<sp/>as<sp/>per<sp/>coding<sp/>guidelines<sp/>and<sp/>MISRA<sp/>checks</highlight></codeline>
<codeline lineno="58"><highlight class="comment">**<sp/>26<sp/>Mar<sp/>2013<sp/>v1.0.10<sp/>1.<sp/>Updated<sp/>for<sp/>the<sp/>baud<sp/>calculation<sp/>in<sp/>UART001_lInit()</highlight></codeline>
<codeline lineno="59"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function.</highlight></codeline>
<codeline lineno="60"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Updated<sp/>for<sp/>the<sp/>alignment<sp/>in<sp/>revision<sp/>history.</highlight></codeline>
<codeline lineno="61"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Updated<sp/>the<sp/>UART001_Init()<sp/>function<sp/>for<sp/>disabling<sp/>the</highlight></codeline>
<codeline lineno="62"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock<sp/>gating<sp/>signal<sp/>for<sp/>XMC1000<sp/>devices.</highlight></codeline>
<codeline lineno="63"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Updated<sp/>function<sp/>UART001_lConfigureBaudRate()<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="64"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Baud<sp/>rate<sp/>calculation.</highlight></codeline>
<codeline lineno="65"><highlight class="comment">**<sp/>25<sp/>Jul<sp/>2013<sp/>v1.0.16<sp/>1.<sp/>Removed<sp/>TBIF<sp/>bit<sp/>configuration<sp/>from<sp/>UART001_lInit<sp/>as<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polling<sp/>is<sp/>not<sp/>used<sp/>in<sp/>the<sp/>UART001<sp/>App.<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Added<sp/>open-drain<sp/>output<sp/>configuration<sp/>for<sp/>Half<sp/>duplex<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>mode<sp/>to<sp/>allow<sp/>the<sp/>wired-AND<sp/>connection<sp/>in</highlight></codeline>
<codeline lineno="69"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple<sp/>transmitter<sp/>communication.</highlight></codeline>
<codeline lineno="70"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Added<sp/>CCR.MODE<sp/>configurations<sp/>in<sp/>UART001_lInit()<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>UART001_Configure<sp/>to<sp/>disable<sp/>the<sp/>UART<sp/>mode<sp/>before<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configuring<sp/>USIC<sp/>registers<sp/>&amp;<sp/>to<sp/>enable<sp/>the<sp/>UART<sp/>mode<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>configurations<sp/>to<sp/>avoid<sp/>unintended<sp/>edges.</highlight></codeline>
<codeline lineno="74"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Modified<sp/>the<sp/>input<sp/>parameter<sp/>of<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_WriteDataMultiple()<sp/>from<sp/>const<sp/>uint16_t*<sp/>to<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>to<sp/>maintain<sp/>backward<sp/>compatibility.</highlight></codeline>
<codeline lineno="77"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>TX<sp/>pin<sp/>set<sp/>logic<sp/>high<sp/>(1)<sp/>before<sp/>configuring<sp/>Open<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Drain<sp/>mode<sp/>for<sp/>Half<sp/>Duplex<sp/>operation<sp/>mode.<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment">**<sp/>04<sp/>Feb<sp/>2014<sp/>V1.0.20<sp/>1.<sp/>Added<sp/>definitions<sp/>for<sp/>&quot;UART001_ReadDataBytes&quot;<sp/>&amp;<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;UART001_WriteDataBytes&quot;<sp/>new<sp/>APIs.</highlight></codeline>
<codeline lineno="81"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Created<sp/>&quot;UART001_lConfigTXPin&quot;<sp/>local<sp/>API<sp/>to<sp/>configure</highlight></codeline>
<codeline lineno="82"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tx<sp/>pin<sp/>as<sp/>Open-drain<sp/>General-purpose<sp/>output<sp/>to<sp/>allow<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wired<sp/>anding<sp/>connection<sp/>in<sp/>the<sp/>Half<sp/>Duplex<sp/>mode.</highlight></codeline>
<codeline lineno="84"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Modified<sp/>UART001_Init<sp/>Api<sp/>to<sp/>handle<sp/>the<sp/>target<sp/>device</highlight></codeline>
<codeline lineno="85"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>based<sp/>initialisations.<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>Added<sp/>TBIF<sp/>configuration<sp/>in<sp/>the<sp/>UART001_lInit<sp/>Api<sp/>if<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Transmit<sp/>FIFO<sp/>buffer<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="88"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>Modified<sp/>as<sp/>per<sp/>coding<sp/>guidelines<sp/>and<sp/>MISRA<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compliance.</highlight></codeline>
<codeline lineno="90"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.<sp/>Removed<sp/>DAVE3.h<sp/>inclusion<sp/>to<sp/>fix<sp/>the<sp/>MISRA<sp/>warning<sp/>for</highlight></codeline>
<codeline lineno="91"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple<sp/>includes.<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.<sp/>Error<sp/>codes<sp/>are<sp/>added<sp/>in<sp/>various<sp/>functions,<sp/>that<sp/>can<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>logged<sp/>with<sp/>DBG002<sp/>App.</highlight></codeline>
<codeline lineno="94"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8.<sp/>Removed<sp/>DBG002_FUNCTION_ENTRY<sp/>&amp;<sp/>DBG002_FUNCTION_EXIT<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calling<sp/>from<sp/>APIs<sp/>as<sp/>using<sp/>these<sp/>macros<sp/>is<sp/>highly<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discouraged.</highlight></codeline>
<codeline lineno="97"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9.<sp/>Added<sp/>standard<sp/>buffer<sp/>functionality<sp/>into<sp/>the<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;UART001_ReadDataMultiple&quot;<sp/>&amp;<sp/>&quot;UART001_WriteDataMultiple&quot;</highlight></codeline>
<codeline lineno="99"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Apis.<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="comment">**<sp/>11<sp/>Apr<sp/>2014<sp/>v1.0.24<sp/>1.<sp/>API<sp/>(UART001_ReadDataMultiple,<sp/>UART001_ReadDataBytes,<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_WriteDataMultiple<sp/>&amp;<sp/>UART001_WriteDataBytes)<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document<sp/>corrections.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="comment">*******************************************************************************/</highlight></codeline>
<codeline lineno="119"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>**<sp/>INCLUDE<sp/>FILES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UART001_H_</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../inc/UART001/UART001.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>((__TARGET_DEVICE__<sp/>==<sp/>XMC45)<sp/>||<sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC44)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC42)<sp/>||<sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC41))<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;../../inc/RESET001/RESET001.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>CLK002_H_</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../inc/CLK002/CLK002.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_DBG002_H_</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../inc/DBG002/DBG002.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMMY<sp/>DEFINITIONS<sp/>OF<sp/>DEBUG<sp/>LOG<sp/>MACROS</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*These<sp/>definitions<sp/>are<sp/>included<sp/>here<sp/>to<sp/>avoid<sp/>compilation<sp/>errors,</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>since<sp/>the<sp/>DBG002<sp/>app<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>project.<sp/>All<sp/>the<sp/>macros<sp/>are<sp/>defined</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>as<sp/>empty*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_DBG002_H_</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBG002_MESSAGEID_LITERAL</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_ERROR(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>definitions<sp/>of<sp/>dummy<sp/>Debug<sp/>Log<sp/>macros*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="150"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Macro<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="151"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_GID<sp/>DBG002_GID_UART001</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="comment">/*Flag<sp/>Offset<sp/>Transmit<sp/>Receive<sp/>Buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART001_FLAG_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x05U</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UART001_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1024U</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>(DCTQ<sp/>+<sp/>1)<sp/>DCTQ<sp/>value<sp/>is<sp/>9<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART001_DCTQ_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0AUL</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UART001_OPENDRAIN_OUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18U</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIRST_NIBBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4U</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SECOND_NIBBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8U</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>THIRD_NIBBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12U</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FOURTH_NIBBLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16U</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SHIFT_ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01U</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SHIFT_TWO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02U</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MASK_ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01U</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="170"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Type<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="171"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="175"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Function<sp/>Declarations:</highlight></codeline>
<codeline lineno="176"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialises<sp/>the<sp/>App<sp/>based<sp/>on<sp/>User<sp/>provide<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t001_8c_1a9b0034e6b6d6d69c6fa7b06546d8cb6f" kindref="member">UART001_lInit</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Configures<sp/>TX<sp/>pin<sp/>as<sp/>Open-drain<sp/>with<sp/>General-purpose<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UART001_lConfigTXPin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Give<sp/>optimised<sp/>PDIV<sp/>and<sp/>STEP<sp/>value<sp/>for<sp/>the<sp/>given<sp/>baud<sp/>rate<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UART001_lConfigureBaudRate\</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t<sp/>BaudRate,uint32_t*<sp/>Pdiv,uint32_t*<sp/>Step);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>to<sp/>find<sp/>the<sp/>real<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>UART001_labsRealType(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Number);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="188"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Constant<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="189"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="192"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Variable<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="193"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="196"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Constant<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="197"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="200"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>like<sp/>macro<sp/>definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="204"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Function<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="205"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>initialises<sp/>the<sp/>USIC<sp/>Channel<sp/>with<sp/>GUI<sp/>configured<sp/>values.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>of<sp/>type<sp/>UART001_HandleType</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>None<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="215" refid="_u_a_r_t001_8c_1a9b0034e6b6d6d69c6fa7b06546d8cb6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t001_8c_1a9b0034e6b6d6d69c6fa7b06546d8cb6f" kindref="member">UART001_lInit</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_1&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>UART<sp/>mode<sp/>before<sp/>configuring<sp/>all<sp/>USIC<sp/>registers<sp/>to<sp/>avoid<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/>*<sp/>unintended<sp/>edges<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>UartRegs-&gt;CCR<sp/>&amp;=<sp/>~(<sp/>((uint32_t)(<ref refid="_usic_8h_1ab2b881cf2de94fa3dc22df0f07300b87" kindref="member">UART_MODE</ref><sp/><sp/>&amp;<sp/>USIC_CH_CCR_MODE_Msk)));<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>USIC<sp/>Channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>UartRegs-&gt;KSCFG<sp/>|=<sp/>((((uint32_t)MASK_ONE<sp/><sp/>&amp;<sp/>USIC_CH_KSCFG_MODEN_Msk))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>USIC_CH_KSCFG_BPMODEN_Pos)<sp/>&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_KSCFG_BPMODEN_Msk));<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>USIC<sp/>Channel<sp/>Fractional<sp/>Divider<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fractional<sp/>divider<sp/>mode<sp/>selected<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>UartRegs-&gt;FDR<sp/>|=<sp/>(((uint32_t)SHIFT_TWO<sp/>&lt;&lt;<sp/>USIC_CH_FDR_DM_Pos)<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>USIC_CH_FDR_DM_Msk);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Step<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>UartRegs-&gt;FDR<sp/>|=<sp/>((Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1ac47cd9d918fba2c6a924ed5fd07ac6de" kindref="member">BGR_STEP</ref>)<sp/>&amp;<sp/>USIC_CH_FDR_STEP_Msk);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>PreDivider<sp/>for<sp/>CTQ,<sp/>PCTQ<sp/>=<sp/>0<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Denominator<sp/>for<sp/>CTQ,<sp/>DCTQ<sp/>=<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>UartRegs-&gt;BRG<sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((((uint32_t)(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a69fc02be001af93d31ac5ce68a5b8778" kindref="member">BGR_PCTQ</ref>)<sp/>&lt;&lt;<sp/>USIC_CH_BRG_PCTQ_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_BRG_PCTQ_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a70dc05524555b2b61c53195981cd2eae" kindref="member">BGR_DCTQ</ref>)<sp/>&lt;&lt;<sp/>USIC_CH_BRG_DCTQ_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_BRG_DCTQ_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a87965e713d462e32622a9fa35789ee1f" kindref="member">BGR_PDIV</ref>)<sp/>&lt;&lt;<sp/>USIC_CH_BRG_PDIV_Pos)<sp/>&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_BRG_PDIV_Msk));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>USIC<sp/>Shift<sp/>Control<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmit/Receive<sp/>LSB<sp/>first<sp/>is<sp/>selected<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmission<sp/>Mode<sp/>(TRM)<sp/>=<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Passive<sp/>Data<sp/>Level<sp/>(PDL)<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>UartRegs-&gt;SCTR<sp/>|=<sp/>((((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_SCTR_PDL_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>USIC_CH_SCTR_PDL_Msk<sp/>)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>(((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/><sp/>USIC_CH_SCTR_TRM_Pos<sp/>)<sp/>&amp;<sp/>USIC_CH_SCTR_TRM_Msk<sp/>));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>Word<sp/>Length<sp/>(WLE)<sp/>&amp;<sp/>Frame<sp/>Length<sp/>(FLE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>UartRegs-&gt;SCTR<sp/>|=<sp/>((((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1abb333776089ef3698bb907975231a75e" kindref="member">DataBits</ref><sp/><sp/>&lt;&lt;<sp/>USIC_CH_SCTR_FLE_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_SCTR_FLE_Msk<sp/>)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1abb333776089ef3698bb907975231a75e" kindref="member">DataBits</ref><sp/><sp/>&lt;&lt;<sp/>USIC_CH_SCTR_WLE_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_SCTR_WLE_Msk));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>USIC<sp/>Transmit<sp/>Control/Status<sp/>Register<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TBUF<sp/>Data<sp/>Enable<sp/>(TDEN)<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>TBUF<sp/>Data<sp/>Single<sp/>Shot<sp/>Mode<sp/>(TDSSM)<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>UartRegs-&gt;TCSR<sp/>|=<sp/>((((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_TCSR_TDEN_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>USIC_CH_TCSR_TDEN_Msk<sp/>)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>(((uint32_t)0x01<sp/><sp/>&lt;&lt;<sp/>USIC_CH_TCSR_TDSSM_Pos)<sp/>&amp;<sp/>USIC_CH_TCSR_TDSSM_Msk));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Protocol<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sample<sp/>Mode<sp/>(SMD)<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1<sp/>Stop<sp/>bit<sp/>is<sp/>selected<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sample<sp/>Point<sp/>(SP)<sp/>as<sp/>configured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pulse<sp/>Length<sp/>(PL)<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>|=<sp/>((((uint32_t)MASK_ONE<sp/>&amp;<sp/>USIC_CH_PCR_ASCMode_SMD_Msk))<sp/>|\</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>(((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1ab1a8e3f5073126ec319313a558e9e2d9" kindref="member">StopBit</ref><sp/><sp/>&lt;&lt;<sp/>USIC_CH_PCR_ASCMode_STPB_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>USIC_CH_PCR_ASCMode_STPB_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>(((uint32_t)(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1aa56089da3861e34362e747ef5021edef" kindref="member">BGR_SP</ref>)<sp/>&lt;&lt;<sp/>USIC_CH_PCR_ASCMode_SP_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>USIC_CH_PCR_ASCMode_SP_Msk));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a2c67b1724416edf2a3c1a6a27106f159" kindref="member">RecvNoiseEn</ref>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Receiver<sp/>Noise<sp/>Interrupt*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>|=(((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_PCR_CTR5_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_CTR5_Msk);<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a54fe3f2a17cb7da435025ab55aabb83b" kindref="member">FormatErrEn</ref>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Format<sp/>Error<sp/>Interrupt*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>|=(((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_PCR_CTR6_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_CTR6_Msk);<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a427b72cf94342b79dd7ed4e0433253cf" kindref="member">FrameFinEn</ref>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Frame<sp/>Finished<sp/>Interrupt*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>|=(((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_PCR_CTR7_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_CTR7_Msk);<sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a04b207f688b852e1a1b5a7c90feba7b6" kindref="member">TxFifoEn</ref>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Transmitter<sp/>Buffer<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;TBCTR<sp/>|=<sp/>((((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a57aa7bb66b9939637ce605dd749881c9" kindref="member">TxLimit</ref><sp/><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_TBCTR_LIMIT_Pos<sp/>)<sp/>&amp;<sp/>USIC_CH_TBCTR_LIMIT_Msk));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TBIF<sp/>is<sp/>set<sp/>to<sp/>simplify<sp/>polling*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;PSR_ASCMode<sp/>|=<sp/>(((uint32_t)SHIFT_ONE<sp/><sp/>&lt;&lt;<sp/>USIC_CH_PSR_TBIF_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)USIC_CH_PSR_TBIF_Msk);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1aefdd2621c625112fff2d76fbd7689b0e" kindref="member">RxFifoEn</ref>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Receiver<sp/>Buffer<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;RBCTR<sp/>|=<sp/>((((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a50971e23469e8644b0d71f5ac88c0072" kindref="member">RxLimit</ref><sp/><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_RBCTR_LIMIT_Pos)<sp/>&amp;<sp/>USIC_CH_RBCTR_LIMIT_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>USIC_CH_RBCTR_LOF_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_RBCTR_LOF_Msk));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Channel<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>UartRegs-&gt;CCR<sp/>|=<sp/>(((uint32_t)(<ref refid="_usic_8h_1ab2b881cf2de94fa3dc22df0f07300b87" kindref="member">UART_MODE</ref><sp/><sp/>&amp;<sp/>USIC_CH_CCR_MODE_Msk))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a82e2292c52c3e8b3dbba54f4feb26488" kindref="member">Parity</ref><sp/><sp/>&lt;&lt;<sp/>USIC_CH_CCR_PM_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_CCR_PM_Msk));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>configures<sp/>TX<sp/>pin<sp/>as<sp/>Open-drain<sp/>General-purpose</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>output<sp/>and<sp/>sets<sp/>to<sp/>&apos;1&apos;.<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>of<sp/>type<sp/>UART001_HandleType</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>None<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UART001_lConfigTXPin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>TempPortPin;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>TX<sp/>portpin<sp/>to<sp/>&apos;1&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1a94edd5a72ab0249f526c069b084de614" kindref="member">TX_PortBase</ref>-&gt;<ref refid="struct_u_a_r_t001___p_o_r_t_s___type_def_1aa02e36818b1a0bc49acbf38d01129202" kindref="member">OMR</ref><sp/>|=<sp/>(uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1afb66e14c2001e93cac1db362ba4479d0" kindref="member">TX_Pin</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>TX<sp/>portpin<sp/>as<sp/>Open-drain<sp/>General-purpose<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>TempPortPin<sp/>=<sp/>(uint32_t)Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1afb66e14c2001e93cac1db362ba4479d0" kindref="member">TX_Pin</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(FIRST_NIBBLE<sp/>&gt;<sp/>TempPortPin)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1a94edd5a72ab0249f526c069b084de614" kindref="member">TX_PortBase</ref>-&gt;<ref refid="struct_u_a_r_t001___p_o_r_t_s___type_def_1a2fa83564d7873461c1671ff960d364b3" kindref="member">IOCR0</ref><sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)UART001_OPENDRAIN_OUT<sp/>&lt;&lt;<sp/>(3U<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TempPortPin<sp/>*<sp/>8U)));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((FIRST_NIBBLE<sp/>&lt;=<sp/>TempPortPin)<sp/>&amp;&amp;<sp/>(SECOND_NIBBLE<sp/>&gt;<sp/>TempPortPin))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TempPortPin<sp/>=<sp/>TempPortPin<sp/>-<sp/>FIRST_NIBBLE;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1a94edd5a72ab0249f526c069b084de614" kindref="member">TX_PortBase</ref>-&gt;<ref refid="struct_u_a_r_t001___p_o_r_t_s___type_def_1a85ca1c0d423511c4d233a6038e384d06" kindref="member">IOCR4</ref><sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)UART001_OPENDRAIN_OUT<sp/>&lt;&lt;<sp/>(3U<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TempPortPin<sp/>*<sp/>8U)));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SECOND_NIBBLE<sp/>&lt;=<sp/>TempPortPin)<sp/>&amp;&amp;<sp/>(THIRD_NIBBLE<sp/>&gt;<sp/>TempPortPin))</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TempPortPin<sp/>=<sp/>TempPortPin<sp/>-<sp/>SECOND_NIBBLE;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1a94edd5a72ab0249f526c069b084de614" kindref="member">TX_PortBase</ref>-&gt;<ref refid="struct_u_a_r_t001___p_o_r_t_s___type_def_1a53e75fadefdf5b0eab92098731c608c2" kindref="member">IOCR8</ref><sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)UART001_OPENDRAIN_OUT<sp/>&lt;&lt;<sp/>(3U<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TempPortPin<sp/>*<sp/>8U)));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((THIRD_NIBBLE<sp/>&lt;=<sp/>TempPortPin)<sp/>&amp;&amp;<sp/>(FOURTH_NIBBLE<sp/>&gt;<sp/>TempPortPin))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TempPortPin<sp/>=<sp/>TempPortPin<sp/>-<sp/>THIRD_NIBBLE;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a18c2cdb7562aaf6c4de9f340b0e751e7" kindref="member">PinHandle</ref>.<ref refid="struct_u_a_r_t001___pin_handle_type_1a94edd5a72ab0249f526c069b084de614" kindref="member">TX_PortBase</ref>-&gt;<ref refid="struct_u_a_r_t001___p_o_r_t_s___type_def_1ac92fce82274276615dbcf84f8ce2cb29" kindref="member">IOCR12</ref><sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)UART001_OPENDRAIN_OUT<sp/>&lt;&lt;<sp/>(3U<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TempPortPin<sp/>*<sp/>8U)));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>finds<sp/>the<sp/>real<sp/>type<sp/>of<sp/>the<sp/>float<sp/>number</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Number<sp/>of<sp/>type<sp/>float</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>return_value<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+ve<sp/>float<sp/>value<sp/>if<sp/>Number<sp/>is<sp/>&lt;<sp/>0.0<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-ve<sp/>float<sp/>value<sp/>if<sp/>Number<sp/>is<sp/>&gt;=<sp/>0.0<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>UART001_labsRealType(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Number)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Number<sp/>&lt;<sp/>0.0F){</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value<sp/>=<sp/>-Number;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_value<sp/>=<sp/>Number;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_value;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>gives<sp/>optimised<sp/>PDIV<sp/>and<sp/>STEP<sp/>value<sp/>for<sp/>the<sp/>given<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>baud<sp/>rate.<sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>BaudRate<sp/>of<sp/>type<sp/>uint32_t</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Pdiv<sp/>reference<sp/>of<sp/>type<sp/>uint32_t</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Step<sp/>reference<sp/>of<sp/>type<sp/>uint32_t</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>None<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UART001_lConfigureBaudRate\</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t<sp/>BaudRate,uint32_t*<sp/>Pdiv,uint32_t*<sp/>Step)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fdr_step<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>brg_pdiv<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>divisor_in<sp/>=<sp/>BaudRate<sp/>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fPB<sp/>/<sp/>1024<sp/>*<sp/>(Brg_dctq<sp/>+<sp/>1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dividend_in<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>divisor[4];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dividend[4];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>remainder[4];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>divisor_array[4];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dividend_array[4];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>div_array[4];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>max,<sp/>frac,divisor1,divisor2,dividend1,dividend2;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>array_count,array_count_1,array_count_2;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>do_while_break<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>temp<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>div_factor;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>loop_cnt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>swapped;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>dividend_in<sp/>=<sp/>(uint32_t)((uint32_t)(UART001_CLOCK<sp/>*<sp/>1000000)/<sp/>\</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UART001_MAX_VALUE<sp/>*<sp/>UART001_DCTQ_VALUE));<sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>if<sp/>divisor_in/dividend_in<sp/>&gt;<sp/>max_divisor/max_dividend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>div_factor<sp/>=<sp/>(float)<sp/>divisor_in/(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>dividend_in;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>div_factor<sp/>&gt;<sp/>1.0F)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>UART001_MAX_VALUE;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped<sp/>=<sp/>1U;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>divisor_in;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor_in<sp/>=<sp/>dividend_in;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_in<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>UART001_MAX_VALUE;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Init<sp/>parameters*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>loop_cnt<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>array_count<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>array_count_1<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>divisor[0]<sp/>=<sp/>divisor_in;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>remainder[0]<sp/>=<sp/>dividend_in;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>divisor_array[0]<sp/>=<sp/>1U;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>dividend_array[0]<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++loop_cnt;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_count_2<sp/>=<sp/>array_count_1;<sp/></highlight><highlight class="comment">/*<sp/>on<sp/>first<sp/>loop<sp/>is<sp/>not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_count_1<sp/>=<sp/>array_count;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_count<sp/>=<sp/>loop_cnt<sp/>%<sp/>4U;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend[array_count]<sp/>=<sp/>divisor[array_count_1];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor[array_count]<sp/>=<sp/>remainder[array_count_1];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div_array[array_count]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend[array_count]<sp/>/<sp/>divisor[array_count];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainder[array_count]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend[array_count]<sp/>%<sp/>divisor[array_count];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>executed<sp/>only<sp/>on<sp/>first<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loop_cnt<sp/>==<sp/>1U)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor_array[1]<sp/>=<sp/>div_array[1];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_array[1]<sp/>=<sp/>1U;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor_array[array_count]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div_array[array_count]<sp/>*<sp/>divisor_array[array_count_1])<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor_array[array_count_2];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_array[array_count]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(div_array[array_count]<sp/>*<sp/>dividend_array[array_count_1])<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_array[array_count_2];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dividend_array[array_count]<sp/>&gt;<sp/>max)<sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor1<sp/>=<sp/>divisor_array[array_count_1];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend1<sp/>=<sp/>dividend_array[array_count_1];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frac<sp/>=<sp/>(max<sp/>-<sp/>dividend_array[array_count_2])<sp/>/<sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_array[array_count_1];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor2<sp/>=<sp/>(frac<sp/>*<sp/>divisor_array[array_count-1U])<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor_array[array_count-2U];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend2<sp/>=<sp/>(frac<sp/>*<sp/>dividend_array[array_count-1U])<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend_array[array_count_2];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>if<sp/>required<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapped)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>divisor1<sp/>and<sp/>dividend1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>divisor1;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor1<sp/>=<sp/>dividend1;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend1<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>divisor2<sp/>and<sp/>dividend2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>divisor2;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor2<sp/>=<sp/>dividend2;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dividend2<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>if<sp/>one<sp/>of<sp/>has<sp/>divisor<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dividend1<sp/>==<sp/>0U)<sp/>||<sp/>(divisor1<sp/>==<sp/>0U))<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>divisor2;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>dividend2;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dividend2<sp/>==<sp/>0U)<sp/>||<sp/>(divisor2<sp/>==<sp/>0U))<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>divisor1;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>dividend1;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Find<sp/>the<sp/>most<sp/>nearest<sp/>to<sp/>target<sp/>division<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UART001_labsRealType(div_factor<sp/>-<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>divisor1<sp/>/<sp/>(float)<sp/>dividend1<sp/>))<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_labsRealType(div_factor<sp/>-<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>divisor2<sp/>/<sp/>(float)<sp/>dividend2<sp/>)))<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>divisor2;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>dividend2;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>divisor1;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>dividend1;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_while_break<sp/>=<sp/>0x05U;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder[array_count]==<sp/>0U)<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>divisor_array[array_count];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>dividend_array[array_count];</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapped)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Swap<sp/>fdr_step<sp/>and<sp/>brg_pdiv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>fdr_step;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>brg_pdiv;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brg_pdiv<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_while_break<sp/>=<sp/>0x05U;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>Nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(do_while_break<sp/>!=<sp/>0x05U);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fdr_step<sp/>&gt;=<sp/>UART001_MAX_VALUE)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdr_step<sp/>=<sp/>1023U;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>*Step<sp/>=<sp/>fdr_step;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>*Pdiv<sp/>=<sp/>brg_pdiv<sp/>-<sp/>1U;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="571"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public<sp/>Function<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="572"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>initialises<sp/>the<sp/>App,<sp/>based<sp/>on<sp/>User<sp/>provided</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>configuration.<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>None</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>None<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="_u_a_r_t001_8c_1a8b7f345b2f36c2ce54e21319196674a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t001_8h_1a8b7f345b2f36c2ce54e21319196674a8" kindref="member" tooltip="This function initialises the App, based on User provided configuration.">UART001_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_1&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>LoopIndex;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(__TARGET_DEVICE__<sp/>!=<sp/>XMC45)</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>((__TARGET_DEVICE__<sp/>==<sp/>XMC13)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC12)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC11))</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>USIC0/USIC1<sp/>clock<sp/>gating<sp/>for<sp/>XMC1000<sp/>devices<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SCU_GENERAL-&gt;PASSWD<sp/>=<sp/>0x000000C0UL;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(SCU_CLK-&gt;CLKCR,<sp/>SCU_CLK_CLKCR_CNTADJ_Msk,<sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(UART001_PER0_USIC0_ENABLED)</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(SCU_CLK-&gt;CGATCLR0,<sp/>SCU_CLK_CGATCLR0_USIC0_Pos);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(UART001_PER1_USIC1_ENABLED)</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(SCU_CLK-&gt;CGATCLR1,<sp/>SCU_CLK_CGATCLR1_USIC1_Pos);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((SCU_CLK-&gt;CLKCR)&amp;(SCU_CLK_CLKCR_VDDC2LOW_Msk))</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SCU_GENERAL-&gt;PASSWD<sp/>=<sp/>0x000000C3UL;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>USIC0/USIC1<sp/>clock<sp/>gating<sp/>for<sp/>XMC4400<sp/>and<sp/>XMC4200<sp/>devices*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>defined(UART001_PER0_USIC0_ENABLED)</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(SCU_CLK-&gt;CGATCLR0,<sp/>SCU_CLK_CGATCLR0_USIC0_Pos);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>defined(UART001_PER1_USIC1_ENABLED)<sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(SCU_CLK-&gt;CGATCLR1,<sp/>SCU_CLK_CGATCLR1_USIC1_Pos);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>((__TARGET_DEVICE__<sp/>==<sp/>XMC45)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC44)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__TARGET_DEVICE__<sp/>==<sp/>XMC42))</highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>Peripheral*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>defined(UART001_PER0_USIC0_ENABLED)</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_e_s_e_t001_8h_1a9151e10e7a68dd3626edf8410569b42a" kindref="member" tooltip="This function is used to clear the Reset of the desired peripheral ( de-assert reset).">RESET001_DeassertReset</ref>(<ref refid="_r_e_s_e_t001_8h_1aa90ed04b053382064226c16284f66fcdad8d17c5d6084ca0ac0d6b22220f0e13b" kindref="member">PER0_USIC0</ref>);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>defined(UART001_PER1_USIC1_ENABLED)</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_e_s_e_t001_8h_1a9151e10e7a68dd3626edf8410569b42a" kindref="member" tooltip="This function is used to clear the Reset of the desired peripheral ( de-assert reset).">RESET001_DeassertReset</ref>(<ref refid="_r_e_s_e_t001_8h_1aa90ed04b053382064226c16284f66fcda7cb8b9f0d02f0ea94ee540ce5e67bfbe" kindref="member">PER1_USIC1</ref>);<sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>defined(UART001_PER1_USIC2_ENABLED)</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_e_s_e_t001_8h_1a9151e10e7a68dd3626edf8410569b42a" kindref="member" tooltip="This function is used to clear the Reset of the desired peripheral ( de-assert reset).">RESET001_DeassertReset</ref>(<ref refid="_r_e_s_e_t001_8h_1aa90ed04b053382064226c16284f66fcda049e5da42853cb6ea0547cc710dc1d76" kindref="member">PER1_USIC2</ref>);<sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif<sp/></highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif<sp/><sp/></highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(LoopIndex<sp/>=<sp/>(uint32_t)0;<sp/>LoopIndex<sp/>&lt;<sp/>(uint32_t)UART001_NUM_HANDLES;<sp/>\</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoopIndex++)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UART001_HandleArray[LoopIndex]-&gt;Mode<sp/>==<sp/><ref refid="_usic_8h_1a704fbdcc9e2ddfa5989b9042938339afa4b820379fe57d1aafa992f7125a47c51" kindref="member">UART_HALFDUPLEX</ref>)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Configure<sp/>TX<sp/>Pin<sp/>in<sp/>Open-drain<sp/>mode<sp/>to<sp/>allow<sp/>the<sp/>Wired-AND<sp/>connection*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_u_a_r_t001_8c_1a9b0034e6b6d6d69c6fa7b06546d8cb6f" kindref="member">UART001_lInit</ref>(UART001_HandleArray[LoopIndex]);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>de-initialises<sp/>the<sp/>USIC<sp/>channel<sp/>configurations.</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>of<sp/>type<sp/>UART001_HandleType</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>None<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>No<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="_u_a_r_t001_8c_1a6183750fd097791ba69205ed360e6537" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="_u_a_r_t001_8h_1a6183750fd097791ba69205ed360e6537" kindref="member" tooltip="This function de-initialises the USIC channel configurations.">UART001_DeInit</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_2&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>holder<sp/>function<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>which<sp/>allows<sp/>changing<sp/>of<sp/>baud<sp/>rate,<sp/>parity<sp/>&amp;<sp/>stop<sp/>bit<sp/><sp/></highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/>*<sp/>configuration<sp/>at<sp/>run<sp/>time.</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/>*<sp/>@param[in]<sp/><sp/>BaudRate<sp/>Desired<sp/>Baud<sp/>Rate<sp/>in<sp/>Bauds</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>*<sp/>@param[in]<sp/><sp/>Parity<sp/>Desired<sp/>Parity</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/>*<sp/>@param[in]<sp/><sp/>Stopbit<sp/>Desired<sp/>no<sp/>of<sp/>Stop<sp/>bit(s)</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/>*<sp/>@return<sp/><sp/><sp/><sp/><sp/>status<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DAVEApp_SUCCESS<sp/>:<sp/>for<sp/>success.&lt;BR&gt;</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_ERROR<sp/><sp/><sp/>:<sp/>for<sp/>failure<sp/>case.&lt;BR&gt;</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_BUSY<sp/><sp/><sp/><sp/>:<sp/>UART<sp/>channel<sp/>is<sp/>busy.&lt;BR&gt;</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">status_t<sp/><sp/><ref refid="_u_a_r_t001_8h_1ad82dcdca5a7770f4524e1527de95407b" kindref="member" tooltip="Function which allows changing of baud rate, parity &amp;amp; stop bit configuration at run time...">UART001_Configure</ref></highlight></codeline>
<codeline lineno="682" refid="_u_a_r_t001_8c_1ad82dcdca5a7770f4524e1527de95407b" refkind="member"><highlight class="normal">(<sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>uint32_t<sp/>BaudRate,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><ref refid="_usic_8h_1a133d537c1f7e5042967df4115c53dcbe" kindref="member">UART_ParityType</ref><sp/>Parity,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="_usic_8h_1a29edaab5c24304a4b92bc53f8fa4ca56" kindref="member">UART_StopBitType</ref><sp/>Stopbit</highlight></codeline>
<codeline lineno="687"><highlight class="normal">)</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Brg_Pdiv<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Fdr_Step<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>TXIDLE_status;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>RXIDLE_status;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(status_t)<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa7f214e950857a0d68f37e90dd862aa98" kindref="member">UART001_ERROR</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_3&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/>TXIDLE_status<sp/>=<sp/>(uint32_t)\</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RD_REG(UartRegs-&gt;PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk,<sp/>\</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PSR_ASCMode_TXIDLE_Pos);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>RXIDLE_status<sp/>=<sp/>(uint32_t)\</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RD_REG(UartRegs-&gt;PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk,<sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PSR_ASCMode_RXIDLE_Pos);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<sp/>TXIDLE_status<sp/>&amp;<sp/>RXIDLE_status)<sp/>==<sp/>0x01U)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>UART<sp/>mode<sp/>before<sp/>configuring<sp/>all<sp/>USIC<sp/>registers<sp/>to<sp/>avoid<sp/></highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>unintended<sp/>edges<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;CCR<sp/>&amp;=<sp/>~(<sp/>((uint32_t)(<ref refid="_usic_8h_1ab2b881cf2de94fa3dc22df0f07300b87" kindref="member">UART_MODE</ref><sp/><sp/>&amp;<sp/>USIC_CH_CCR_MODE_Msk)));<sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>USIC<sp/>Channel<sp/>Fractional<sp/>Divider<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UART001_lConfigureBaudRate(BaudRate,&amp;Brg_Pdiv,&amp;Fdr_Step);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Step<sp/>value:<sp/>0x3FF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;FDR<sp/>&amp;=<sp/>~(USIC_CH_FDR_STEP_Msk);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;FDR<sp/>|=<sp/>(<sp/>Fdr_Step<sp/>&amp;<sp/>USIC_CH_FDR_STEP_Msk);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>PreDivider<sp/>for<sp/>CTQ,<sp/>PCTQ<sp/>=<sp/>0<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Denominator<sp/>for<sp/>CTQ,<sp/>DCTQ<sp/>=<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;BRG<sp/>&amp;=<sp/>~(USIC_CH_BRG_PDIV_Msk);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;BRG<sp/>|=<sp/>((((uint32_t)Brg_Pdiv<sp/><sp/>&lt;&lt;<sp/>USIC_CH_BRG_PDIV_Pos)<sp/>\</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><sp/>USIC_CH_BRG_PDIV_Msk));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>StopBit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>&amp;=<sp/>~(USIC_CH_PCR_ASCMode_STPB_Msk);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;PCR_ASCMode<sp/>|=<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Stopbit<sp/>&lt;&lt;<sp/>USIC_CH_PCR_ASCMode_STPB_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_ASCMode_STPB_Msk);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>Parity*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;CCR<sp/>&amp;=<sp/>~(USIC_CH_CCR_PM_Msk);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;CCR<sp/>|=<sp/>(((<ref refid="_usic_8h_1ab2b881cf2de94fa3dc22df0f07300b87" kindref="member">UART_MODE</ref><sp/><sp/>&amp;<sp/>USIC_CH_CCR_MODE_Msk))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Parity<sp/><sp/>&lt;&lt;<sp/>USIC_CH_CCR_PM_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_CCR_PM_Msk));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(status_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(status_t)<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa9df0f56734f16fc34df819aec40595d0" kindref="member">UART001_BUSY</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Status),<sp/>&amp;Status);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>@brief<sp/>When<sp/>receive<sp/>FIFO<sp/>is<sp/>enabled,<sp/>this<sp/>function<sp/>reads<sp/>the<sp/>USIC<sp/>receive</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>FIFO<sp/>Buffer,<sp/>word<sp/>by<sp/>word,<sp/>until<sp/>there<sp/>is<sp/>no<sp/>data<sp/>in<sp/>the<sp/>FIFO<sp/>buffer<sp/>and<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>the<sp/>&quot;Count&quot;<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>&quot;0&quot;.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>But<sp/>when<sp/>receive<sp/>FIFO<sp/>buffer<sp/>is<sp/>disabled,<sp/>it<sp/>reads<sp/>a<sp/>word<sp/>from<sp/>standard<sp/></highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>receive<sp/>buffer<sp/></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Fifo<sp/>trigger<sp/>limit<sp/>should<sp/>be<sp/>adjusted<sp/>manually<sp/>to<sp/>read</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/>required<sp/>amount<sp/>of<sp/>data<sp/>from<sp/>FIFO<sp/>buffer.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>DataPtr<sp/><sp/>Pointer<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Count<sp/><sp/><sp/>Total<sp/>no<sp/>of<sp/>words<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>uint32_t<sp/>Number<sp/>of<sp/>data<sp/>read<sp/>from<sp/>FIFO/standard<sp/>receive<sp/>buffer<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>&lt;i&gt;Imp<sp/>Note:&lt;/i&gt;<sp/>Return<sp/>Count<sp/>will<sp/>be<sp/>always<sp/>&apos;1&apos;,<sp/>if<sp/>datais<sp/>read<sp/>from<sp/>the<sp/></highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>buffer.<sp/></highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal">uint32_t<sp/><ref refid="_u_a_r_t001_8h_1acf8ad779c2b8cdcf5e55dabff2e6ce04" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, word by word...">UART001_ReadDataMultiple</ref></highlight></codeline>
<codeline lineno="771" refid="_u_a_r_t001_8c_1acf8ad779c2b8cdcf5e55dabff2e6ce04" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>uint16_t*<sp/>DataPtr,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count</highlight></codeline>
<codeline lineno="775"><highlight class="normal">)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ReadCount<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;<sp/><sp/></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_4&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>enabled<sp/>read<sp/>data<sp/>from<sp/>receive<sp/>FIFO<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1aefdd2621c625112fff2d76fbd7689b0e" kindref="member">RxFifoEn</ref>)<sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/><ref refid="_usic_8h_1ae9f2bb705f8023a76e8ba21162e942ff" kindref="member">USIC_ubIsRxFIFOempty</ref>(UartRegs)<sp/>&amp;&amp;<sp/>Count)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*DataPtr<sp/>=<sp/>(uint16_t)UartRegs-&gt;OUTR;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count--;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCount++;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataPtr++;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>disabled<sp/>read<sp/>data<sp/>from<sp/>standard<sp/>receive<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*DataPtr<sp/>=<sp/>(uint16_t)UartRegs-&gt;RBUF;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCount++;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ReadCount;</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>@brief<sp/>When<sp/>receive<sp/>FIFO<sp/>is<sp/>enabled,<sp/>this<sp/>function<sp/>reads<sp/>the<sp/>USIC<sp/>receive</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>FIFO<sp/>Buffer,<sp/>byte<sp/>by<sp/>byte,<sp/>until<sp/>there<sp/>is<sp/>no<sp/>data<sp/>in<sp/>the<sp/>FIFO<sp/>buffer<sp/>and<sp/></highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>the<sp/>&quot;Count&quot;<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>&quot;0&quot;.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>But<sp/>when<sp/>receive<sp/>FIFO<sp/>buffer<sp/>is<sp/>disabled,<sp/>it<sp/>reads<sp/>a<sp/>byte<sp/>from<sp/>standard<sp/></highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>receive<sp/>buffer<sp/></highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Fifo<sp/>trigger<sp/>limit<sp/>should<sp/>be<sp/>adjusted<sp/>manually<sp/>to<sp/>read</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>required<sp/>amount<sp/>of<sp/>data<sp/>from<sp/>FIFO<sp/>buffer.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>DataPtr<sp/><sp/>Pointer<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Count<sp/><sp/><sp/>Total<sp/>no<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>uint32_t<sp/>Number<sp/>of<sp/>data<sp/>read<sp/>from<sp/>FIFO/standard<sp/>receive<sp/>buffer<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>&lt;i&gt;Imp<sp/>Note:&lt;/i&gt;<sp/>Return<sp/>Count<sp/>will<sp/>be<sp/>always<sp/>&apos;1&apos;,<sp/>if<sp/>data<sp/>is<sp/>read<sp/>from<sp/>the<sp/></highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>buffer.<sp/></highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal">uint32_t<sp/><ref refid="_u_a_r_t001_8h_1a190d4530caf26cdf2c6be3567299050f" kindref="member" tooltip="When receive FIFO is enabled, this function reads the USIC receive FIFO Buffer, byte by byte...">UART001_ReadDataBytes</ref></highlight></codeline>
<codeline lineno="823" refid="_u_a_r_t001_8c_1a190d4530caf26cdf2c6be3567299050f" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>DataPtr,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count</highlight></codeline>
<codeline lineno="827"><highlight class="normal">)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ReadCount<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;<sp/><sp/></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_4&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>enabled<sp/>read<sp/>data<sp/>from<sp/>receive<sp/>FIFO<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1aefdd2621c625112fff2d76fbd7689b0e" kindref="member">RxFifoEn</ref>)<sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/><ref refid="_usic_8h_1ae9f2bb705f8023a76e8ba21162e942ff" kindref="member">USIC_ubIsRxFIFOempty</ref>(UartRegs)<sp/>&amp;&amp;<sp/>Count)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*DataPtr<sp/>=<sp/>(uint8_t)UartRegs-&gt;OUTR;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count--;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCount++;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataPtr++;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>disabled<sp/>read<sp/>data<sp/>from<sp/>standard<sp/>receive<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*DataPtr<sp/>=<sp/>(uint8_t)UartRegs-&gt;RBUF;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCount++;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ReadCount;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>@brief<sp/>When<sp/>FIFO<sp/>is<sp/>enabled,<sp/>this<sp/>function<sp/>writes<sp/>data<sp/>to<sp/>the<sp/>USIC<sp/>FIFO<sp/></highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/>transmit<sp/>buffer<sp/>register,<sp/>word<sp/>by<sp/>word,<sp/>until<sp/>the<sp/>FIFO<sp/>buffer<sp/>is<sp/>full<sp/>and<sp/></highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>the<sp/>&quot;Count&quot;<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>&quot;0&quot;.</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>But<sp/>when<sp/>transmit<sp/>FIFO<sp/>is<sp/>disabled,<sp/>it<sp/>writes<sp/>a<sp/>word<sp/>to<sp/>the<sp/>standard<sp/></highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Fifo<sp/>trigger<sp/>limit<sp/>should<sp/>be<sp/>adjusted<sp/>manually<sp/>to<sp/>transmit<sp/></highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/>to<sp/>transmit<sp/>required<sp/>amount<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/>Reentrant<sp/>:<sp/>No</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/><sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>DataPtr<sp/>Pointer<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Count<sp/><sp/><sp/>Total<sp/>no<sp/>of<sp/>words<sp/>to<sp/>be<sp/>transmitted.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Number<sp/>of<sp/>data<sp/>written<sp/>to<sp/>buffer<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*<sp/>&lt;i&gt;Imp<sp/>Note:&lt;/i&gt;<sp/>Return<sp/>Count<sp/>will<sp/>be<sp/>always<sp/>&apos;1&apos;,<sp/>if<sp/>data<sp/>is<sp/>written<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>buffer.<sp/></highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">uint32_t<sp/><ref refid="_u_a_r_t001_8h_1a61fdfc06efab866a051222c2b20d1431" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, word by word, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a word to the standard transmit buffer.">UART001_WriteDataMultiple</ref></highlight></codeline>
<codeline lineno="877" refid="_u_a_r_t001_8c_1a61fdfc06efab866a051222c2b20d1431" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>uint16_t*<sp/>DataPtr,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count</highlight></codeline>
<codeline lineno="881"><highlight class="normal">)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>uint32_t<sp/>WriteCount<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;<sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_5&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>enabled<sp/>write<sp/>data<sp/>to<sp/>the<sp/>transmit<sp/>FIFO<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a04b207f688b852e1a1b5a7c90feba7b6" kindref="member">TxFifoEn</ref>)<sp/></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/><ref refid="_usic_8h_1a0a4a40f1195c0a4a52daf86fce971ae7" kindref="member">USIC_IsTxFIFOfull</ref>(UartRegs)&amp;&amp;<sp/>Count)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;IN[0]<sp/>=<sp/>*DataPtr;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count--;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteCount++;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataPtr++;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>disabled<sp/>write<sp/>data<sp/>to<sp/>the<sp/>standard<sp/>transmit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(USIC_CH_TCSR_TDV_Msk<sp/>&amp;<sp/>UartRegs-&gt;TCSR))</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;TBUF[0]<sp/>=<sp/>*DataPtr;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteCount++;<sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WriteCount;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*<sp/>@brief<sp/>When<sp/>FIFO<sp/>is<sp/>enabled,<sp/>this<sp/>function<sp/>writes<sp/>data<sp/>to<sp/>the<sp/>USIC<sp/>FIFO<sp/></highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>transmit<sp/>buffer<sp/>register,<sp/>byte<sp/>by<sp/>byte,<sp/>until<sp/>the<sp/>FIFO<sp/>buffer<sp/>is<sp/>full<sp/>and<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>the<sp/>&quot;Count&quot;<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>&quot;0&quot;.</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>But<sp/>when<sp/>transmit<sp/>FIFO<sp/>is<sp/>disabled,<sp/>it<sp/>writes<sp/>a<sp/>byte<sp/>to<sp/>the<sp/>standard<sp/></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Fifo<sp/>trigger<sp/>limit<sp/>should<sp/>be<sp/>adjusted<sp/>manually<sp/>to<sp/>transmit<sp/></highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*<sp/>to<sp/>transmit<sp/>required<sp/>amount<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/>Reentrant<sp/>:<sp/>No</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/><sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>DataPtr<sp/>Pointer<sp/>to<sp/>data</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Count<sp/><sp/><sp/>Total<sp/>no<sp/>of<sp/>words<sp/>to<sp/>be<sp/>transmitted.</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Number<sp/>of<sp/>data<sp/>written<sp/>to<sp/>buffer<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*<sp/>&lt;i&gt;Imp<sp/>Note:&lt;/i&gt;<sp/>Return<sp/>Count<sp/>will<sp/>be<sp/>always<sp/>&apos;1&apos;,<sp/>if<sp/>data<sp/>is<sp/>written<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>buffer.<sp/></highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">uint32_t<sp/><ref refid="_u_a_r_t001_8h_1a8f18b90baea892eaeb3a6bb7aa74d5db" kindref="member" tooltip="When FIFO is enabled, this function writes data to the USIC FIFO transmit buffer register, byte by byte, until the FIFO buffer is full and the &amp;quot;Count&amp;quot; value is greater than &amp;quot;0&amp;quot;. But when transmit FIFO is disabled, it writes a byte to the standard transmit buffer.">UART001_WriteDataBytes</ref></highlight></codeline>
<codeline lineno="934" refid="_u_a_r_t001_8c_1a8f18b90baea892eaeb3a6bb7aa74d5db" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>DataPtr,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count</highlight></codeline>
<codeline lineno="938"><highlight class="normal">)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>uint32_t<sp/>WriteCount<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_6&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>enabled<sp/>write<sp/>data<sp/>to<sp/>the<sp/>transmit<sp/>FIFO<sp/>buffer<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Handle-&gt;<ref refid="struct_u_a_r_t001___handle_type_1a04b207f688b852e1a1b5a7c90feba7b6" kindref="member">TxFifoEn</ref>)<sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<sp/><ref refid="_usic_8h_1a0a4a40f1195c0a4a52daf86fce971ae7" kindref="member">USIC_IsTxFIFOfull</ref>(UartRegs)&amp;&amp;<sp/>Count)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;IN[0]<sp/>=<sp/>*DataPtr;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count--;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteCount++;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataPtr++;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>FIFO<sp/>is<sp/>disabled<sp/>write<sp/>data<sp/>to<sp/>the<sp/>standard<sp/>transmit<sp/>buffer<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(USIC_CH_TCSR_TDV_Msk<sp/>&amp;<sp/>UartRegs-&gt;TCSR))</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UartRegs-&gt;TBUF[0]<sp/>=<sp/>*DataPtr;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteCount++;<sp/></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WriteCount;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*<sp/>@brief<sp/>The<sp/>function<sp/>is<sp/>used<sp/>to<sp/>get<sp/>the<sp/>event<sp/>flag<sp/>status<sp/>specified.</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>returns<sp/>UART_SET<sp/>if<sp/>the<sp/>corresponding<sp/>flag</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>set<sp/>else<sp/>otherwise.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Flag<sp/><sp/><sp/>UART<sp/>Flag<sp/>which<sp/>needs<sp/>to<sp/>be<sp/>checked</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/><sp/><sp/><sp/>status_t<sp/>&lt;BR&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_SET<sp/><sp/><sp/><sp/>:<sp/>indicates<sp/>Flag<sp/>is<sp/>set.&lt;BR&gt;</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_RESET<sp/><sp/>:<sp/>indicates<sp/>Flag<sp/>is<sp/>reset.&lt;BR&gt;</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">status_t<sp/><ref refid="_u_a_r_t001_8h_1a1f522695783cf883fb6139028b844116" kindref="member" tooltip="The function is used to get the event flag status specified. It returns UART_SET if the corresponding...">UART001_GetFlagStatus</ref><sp/></highlight></codeline>
<codeline lineno="984" refid="_u_a_r_t001_8c_1a1f522695783cf883fb6139028b844116" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549" kindref="member" tooltip="This data type describes the available UART Status flags.">UART001_FlagStatusType</ref><sp/>Flag</highlight></codeline>
<codeline lineno="987"><highlight class="normal">)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(status_t)<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49fa4ba7962009eb0fe254b00c6cf94da503" kindref="member">UART001_RESET</ref>;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>uint32_t<sp/>TempValue<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_7&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Flag<sp/>&lt;=<sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a297fdf5fb6597d195e107d0b4c029e6e" kindref="member">UART001_ALT_REC_IND_FLAG</ref>)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/>=<sp/>UartRegs-&gt;PSR_ASCMode;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/><sp/>&amp;=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>(uint32_t)Flag);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Flag<sp/>&lt;=<sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a4429abf74af401c43d75a94485b1f6fc" kindref="member">UART001_FIFO_ALTRECV_BUF_FLAG</ref>)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/>=<sp/>UartRegs-&gt;TRBSR;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/><sp/>&amp;=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)Flag<sp/>-<sp/>(uint32_t)<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/>=<sp/>UartRegs-&gt;TRBSR;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>TempValue<sp/><sp/>&amp;=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Flag<sp/>-<sp/>(uint32_t)<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>)<sp/>+<sp/>0x05U<sp/>));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TempValue)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(status_t)<ref refid="_u_a_r_t001_8h_1a85909755dedf914d02f1449641d3a49faf7efa6890500ca0bde8d20fefb82b37b" kindref="member">UART001_SET</ref>;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>function<sp/>clears<sp/>the<sp/>specified<sp/>event<sp/>flag<sp/>status.</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Handle<sp/>USIC<sp/>device<sp/>handle</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>Flag<sp/><sp/><sp/>UART<sp/>Flag<sp/>which<sp/>needs<sp/>to<sp/>be<sp/>cleared</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/><sp/><sp/>None</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*<sp/>&lt;b&gt;Reentrant:<sp/>NO<sp/>&lt;/b&gt;&lt;BR&gt;</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_a_r_t001_8h_1a35321989a23a4463d1343b664a21ae5f" kindref="member" tooltip="This function clears the specified event flag status.">UART001_ClearFlag</ref></highlight></codeline>
<codeline lineno="1033" refid="_u_a_r_t001_8c_1a35321989a23a4463d1343b664a21ae5f" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_a_r_t001___handle_type" kindref="compound" tooltip="This data type describes UART App instance handle details.">UART001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549" kindref="member" tooltip="This data type describes the available UART Status flags.">UART001_FlagStatusType</ref><sp/>Flag</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>USIC_CH_TypeDef*<sp/>UartRegs<sp/>=<sp/>Handle-&gt;UartRegs;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_UART001_API_8&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Flag<sp/>&lt;=<sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a297fdf5fb6597d195e107d0b4c029e6e" kindref="member">UART001_ALT_REC_IND_FLAG</ref>)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;PSCR<sp/><sp/>|=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>(uint32_t)Flag);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Flag<sp/>&lt;=<sp/><ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a4429abf74af401c43d75a94485b1f6fc" kindref="member">UART001_FIFO_ALTRECV_BUF_FLAG</ref>)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;TRBSCR<sp/><sp/>|=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)Flag<sp/>-<sp/>(uint32_t)<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>));<sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>UartRegs-&gt;TRBSCR<sp/><sp/>|=<sp/>((uint32_t)SHIFT_ONE<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)Flag<sp/>-<sp/>(uint32_t)<ref refid="_u_a_r_t001_8h_1a028c459f44e4a2d1d2895ecb7b857549a38afd6d6f11eaac1aeeecab17f0a2f10" kindref="member">UART001_FIFO_STD_RECV_BUF_FLAG</ref>)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART001_FLAG_OFFSET<sp/>));</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="comment">/*CODE_BLOCK_END*/</highlight><highlight class="normal"><sp/></highlight></codeline>
    </programlisting>
    <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c"/>
  </compounddef>
</doxygen>
