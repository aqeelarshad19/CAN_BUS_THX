<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_c_a_n001_8c" kind="file">
    <compoundname>CAN001.c</compoundname>
    <includes refid="_d_a_v_e3_8h" local="no">DAVE3.h</includes>
    <incdepgraph>
      <node id="16">
        <label>CAN_Types.h</label>
        <link refid="_c_a_n___types_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>CCU8PWMLIB.h</label>
        <link refid="_c_c_u8_p_w_m_l_i_b_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>XMC4500.h</label>
      </node>
      <node id="23">
        <label>UART001_Conf.h</label>
        <link refid="_u_a_r_t001___conf_8h"/>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="20">
        <label>../../inc/NVIC002/NVIC002.h</label>
        <link refid="_n_v_i_c002_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>../../inc/IO004/IO004.h</label>
        <link refid="_i_o004_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="22">
        <label>Usic.h</label>
        <link refid="_usic_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../../inc/LIBS/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>CAN001.c</label>
        <link refid="CAN001.c"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../../inc/CLK001/CLK001.h</label>
        <link refid="_c_l_k001_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../../inc/DAVESupport/MULTIPLEXER.h</label>
        <link refid="_m_u_l_t_i_p_l_e_x_e_r_8h"/>
      </node>
      <node id="14">
        <label>../../inc/CANGLOBAL/CANGLOBAL.h</label>
        <link refid="_c_a_n_g_l_o_b_a_l_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../../inc/DBG001/DBG001.h</label>
        <link refid="_d_b_g001_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>CAN001_Conf.h</label>
        <link refid="_c_a_n001___conf_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>uc_id.h</label>
      </node>
      <node id="15">
        <label>../../inc/CAN001/CAN001.h</label>
        <link refid="_c_a_n001_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>IO004_Conf.h</label>
        <link refid="_i_o004___conf_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>DAVE3.h</label>
        <link refid="_d_a_v_e3_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../../inc/UART001/UART001.h</label>
        <link refid="_u_a_r_t001_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>UART001_Extern.h</label>
        <link refid="_u_a_r_t001___extern_8h"/>
      </node>
      <node id="11">
        <label>../../inc/RESET001/RESET001.h</label>
        <link refid="_r_e_s_e_t001_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>MOTORLIB.h</label>
        <link refid="_m_o_t_o_r_l_i_b_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../../inc/LIBS/LIBS.h</label>
        <link refid="_l_i_b_s_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="_c_a_n001_8c_1a318743c86683559b51827cdc3fb9229e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN001_lAllocateMOtoNodeList</definition>
        <argsstring>(uint8_t List, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_lAllocateMOtoNodeList</name>
        <param>
          <type>uint8_t</type>
          <declname>List</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
<para>Function to allocate message object from free list to node list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">List</parametername>
</parameternamelist>
<parameterdescription>
<para>Node list no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object number to be allocated to node list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t MO number allocated <bold>Reentrant: NO </bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="184" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a8e20bf55e6e630dc7676361c0b673922" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN001_lDeallocateMsgObj</definition>
        <argsstring>(uint32_t MsgObjnr)</argsstring>
        <name>CAN001_lDeallocateMsgObj</name>
        <param>
          <type>uint32_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
<para>Function to deallocate MO from Node list to free list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object number to be deallocated to free list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="197" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="269" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a601552aaa88714dde46afef8b2135318" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN001_lConfigMORegs</definition>
        <argsstring>(const CAN001_MessageHandleType *MsgObjptr, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_lConfigMORegs</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> *</type>
          <declname>MsgObjptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
<para>Function to configure message object registers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to message object data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual message object number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="215" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="284" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a122621a6428f6f9c3505fe37f208b873" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN001_lNodeInit</definition>
        <argsstring>(const CAN001_HandleType *Handle)</argsstring>
        <name>CAN001_lNodeInit</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
<para>Function to initialize node as per UI configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Node configuration structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="229" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="364" bodyend="407"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="_c_a_n001_8c_1a475ef2c34ceab6f92690100e4f437581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN001_Init</definition>
        <argsstring>(void)</argsstring>
        <name>CAN001_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes All CAN nodes instances and message objects configured through UI</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <linebreak/>
</para><para><bold>Example:</bold> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();<sp/></highlight><highlight class="comment">//<sp/>CAN001_Init()<sp/>will<sp/>be<sp/>called<sp/>from<sp/>DAVE_Init()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="421" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="420" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1aa5a37c13321cc60553c418c5828308b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN001_NodeDeInit</definition>
        <argsstring>(const CAN001_HandleType *Handle)</argsstring>
        <name>CAN001_NodeDeInit</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will deinitialize all the node registers and de allocate all the message objects from the node list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
 <linebreak/>
</para><para><bold>Example:</bold> <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1aa5a37c13321cc60553c418c5828308b1" kindref="member">CAN001_NodeDeInit</ref>(&amp;CAN001_Handle0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="441" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="440" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_ConfigMsgObj</definition>
        <argsstring>(const CAN001_HandleType *Handle, const CAN001_MessageHandleType *SwMsgObjptr, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_ConfigMsgObj</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>const <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> *</type>
          <declname>SwMsgObjptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes logical message object for reception or transmission and configures CAN message object related parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">SwMsgObjptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to structure which contains message elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: if message object is configured<linebreak/>
 CAN001_INVALID_INPUT: If Input parameter is invalid<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of MO selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>TempMsgHandle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>TempMsgHandle.<ref refid="struct_c_a_n001___message_handle_type_1aaf7f5b0805c58511d90bcc2aec27ec1f" kindref="member">Identifier</ref><sp/>=<sp/>0x255;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>TempMsgHandle.<ref refid="struct_c_a_n001___message_handle_type_1ac47fe7fa9902f1232f8bec52c840666c" kindref="member">DataLength</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>TempMsgHandle.<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[0]<sp/>=<sp/>0x23;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>TempMsgHandle.<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[1]<sp/>=<sp/>0x46;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>message<sp/>object<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" kindref="member">CAN001_ConfigMsgObj</ref>(&amp;CAN001_Handle0,&amp;TempMsgHandle,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CAN<sp/>message<sp/>configuration<sp/>successfull</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="489" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="484" bodyend="521"/>
        <referencedby refid="_c_a_n001_8c_1a475ef2c34ceab6f92690100e4f437581" compoundref="_c_a_n001_8c" startline="420" endline="434">CAN001_Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a7d87336df18913baaac93a9776c47e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_SendDataFrame</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_SendDataFrame</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set transmit request to transmit message object for sending data frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: if message is transmitted<linebreak/>
 CAN001_MO_NOT_ACCEPTABLE: If MO is not a transmit message object<linebreak/>
 CAN001_MO_BUSY: if MO is currently transmitting a mesage<linebreak/>
 CAN001_MSGOBJ_DISABLED: If MO is Disabled<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>Data[8]<sp/>=<sp/>{0xBC,0x11,0x22,0xA5,0xEF,0xFF,0x89,0x01};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a68a886b4fc31200314a08ba112d063f8" kindref="member">CAN001_UpdateMODataRegisters</ref>(&amp;CAN001_Handle0,1,8,Data);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a7d87336df18913baaac93a9776c47e6e" kindref="member">CAN001_SendDataFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmit<sp/>request<sp/>for<sp/>sending<sp/>data<sp/>frame<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="531" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="530" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a2b63fea4f457401ffa4899f3dacfd6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_SendRemoteFrame</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_SendRemoteFrame</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set transmit request to receive message object for sending remote frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: if message is transmitted<linebreak/>
 CAN001_MO_NOT_ACCEPTABLE: If MO is not a received message object<linebreak/>
 CAN001_MO_BUSY: if MO is currently transmitting a mesage<linebreak/>
 CAN001_MSGOBJ_DISABLED: If MO is Disabled<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmit<sp/>request<sp/>for<sp/>sending<sp/>remote<sp/>frame<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="579" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="578" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_ReadMsgObj</definition>
        <argsstring>(const CAN001_HandleType *Handle, CAN001_MessageHandleType *SwMsgObjptr, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_ReadMsgObj</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> *</type>
          <declname>SwMsgObjptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads the specified receive message object parameters to the input data structure. It will read only CAN frame parameters like identifier, identifier extension, ID mask, data length and 8 bytes of data</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">SwMsgObjptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to structure in which MO parameters are written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: if message is received<linebreak/>
 CAN001_MO_NOT_ACCEPTABLE: If MO is not a receive message object<linebreak/>
 CAN001_MO_BUSY: if MO is currently receiving a message<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>CanRecMsgObj;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(<ref refid="_c_a_n001_8h_1a33cfce269fb266684be1431b7dc70933" kindref="member">CAN001_GetMOFlagStatus</ref>(&amp;CAN001_Handle0,1,<ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab1384558eaf5a56dcf637e4f814ec3c1" kindref="member">RECEIVE_PENDING</ref>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>CAN<sp/>message<sp/>to<sp/>handle<sp/>CanRecMsgObj</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref>(&amp;CAN001_Handle0,&amp;CanRecMsgObj,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="632" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="627" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a68a886b4fc31200314a08ba112d063f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_UpdateMODataRegisters</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr, uint8_t DataLength, const uint8_t *DataPtr)</argsstring>
        <name>CAN001_UpdateMODataRegisters</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>DataLength</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>DataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates data register of transmit message object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Message data length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Message data pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t CAN001_INVALID_INPUT: if input parameter is not valid<linebreak/>
 CAN001_MO_NOT_ACCEPTABLE: if MO is not a transmit message object<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>Data[8]<sp/>=<sp/>{0xBC,0x11,0x22,0xA5,0xEF,0xFF,0x89,0x01};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a68a886b4fc31200314a08ba112d063f8" kindref="member">CAN001_UpdateMODataRegisters</ref>(&amp;CAN001_Handle0,1,8,Data);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a7d87336df18913baaac93a9776c47e6e" kindref="member">CAN001_SendDataFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmit<sp/>request<sp/>for<sp/>sending<sp/>data<sp/>frame<sp/>is<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="730" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="724" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a33cfce269fb266684be1431b7dc70933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_GetMOFlagStatus</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr, CAN_MsgStatusType NewMsgStatus)</argsstring>
        <name>CAN001_GetMOFlagStatus</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <param>
          <type><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78" kindref="member">CAN_MsgStatusType</ref></type>
          <declname>NewMsgStatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the status of the message object specified. The flag value to be returned should be passed as input parameter of Enumtype CAN_MsgStatusType.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NewMsgStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum values for getting MO status<linebreak/>
 RECEIVE_PENDING<linebreak/>
 TRANSMIT_PENDING<linebreak/>
 NEW_DATA<linebreak/>
 MESSAGE_LOST<linebreak/>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t CAN001_SET: if Value is 1<linebreak/>
 CAN001_RESET: if value is 0<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Message objects selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>CanRecMsgObj;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(<ref refid="_c_a_n001_8h_1a33cfce269fb266684be1431b7dc70933" kindref="member">CAN001_GetMOFlagStatus</ref>(&amp;CAN001_Handle0,1,<ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab1384558eaf5a56dcf637e4f814ec3c1" kindref="member">RECEIVE_PENDING</ref>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>CAN<sp/>message<sp/>to<sp/>handle<sp/>CanRecMsgObj</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref>(&amp;CAN001_Handle0,&amp;CanRecMsgObj,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="799" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="794" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a41cc6c91f9def74cd9db7d29e9b500b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_GetNodeFlagStatus</definition>
        <argsstring>(const CAN001_HandleType *Handle, CAN001_NodeStatusType NewNodeStatus)</argsstring>
        <name>CAN001_GetNodeFlagStatus</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378" kindref="member">CAN001_NodeStatusType</ref></type>
          <declname>NewNodeStatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the status of the node specified. The flag value to be returned should be passed as input parameter of type CAN001_NodeStatusType.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NewNodeStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value for getting node status<linebreak/>
 CAN001_ALERT_STATUS<linebreak/>
 CAN001_ERROR_WARN_STATUS<linebreak/>
 CAN001_BUS_OFF_STATUS<linebreak/>
 CAN001_LIST_LENGTH_ERROR<linebreak/>
 CAN001_LIST_OBJECT_ERROR<linebreak/>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t CAN001_SET: if Value is 1<linebreak/>
 CAN001_RESET: if value is 0<linebreak/>
 CAN001_INVALID_INPUT: if input value is not valid<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a7d87336df18913baaac93a9776c47e6e" kindref="member">CAN001_SendDataFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a41cc6c91f9def74cd9db7d29e9b500b3" kindref="member">CAN001_GetNodeFlagStatus</ref>(&amp;CAN001_Handle0,<ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378ad2d3d22a0c1069ffc789089912a122c0" kindref="member">CAN001_BUS_OFF_STATUS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/><ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a00c42e532df2ce88528fd93eb7a2f99c" kindref="member">CAN_SET</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bus<sp/>Off<sp/>Condition.<sp/>Deinit<sp/>the<sp/>CAN<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="836" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="832" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1aea102a989fd23f0d96606b15b2bbe65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_GetMOPndRegisterBitStatus</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_GetMOPndRegisterBitStatus</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the message object&apos;s message pending register bit value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired message object number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t CAN001_SET: if Value is 1<linebreak/>
 CAN001_RESET: if value is 0<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>CanRecMsgObj;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(<ref refid="_c_a_n001_8h_1aea102a989fd23f0d96606b15b2bbe65e" kindref="member">CAN001_GetMOPndRegisterBitStatus</ref>(&amp;CAN001_Handle0,1)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>CAN<sp/>message<sp/>to<sp/>handle<sp/>CanRecMsgObj</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref>(&amp;CAN001_Handle0,&amp;CanRecMsgObj,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="869" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="865" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a3e8baab1eee0750a8d7310e58420bcaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_ClearMOFlagStatus</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr, CAN_MsgStatusType NewMsgStatus)</argsstring>
        <name>CAN001_ClearMOFlagStatus</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <param>
          <type><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78" kindref="member">CAN_MsgStatusType</ref></type>
          <declname>NewMsgStatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the status bits of message object register MOSTATx. The input parameter can be a combination of enum type CAN_MsgStatusType</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NewMsgStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum values for clearing MO status<linebreak/>
 RECEIVE_PENDING<linebreak/>
 TRANSMIT_PENDING<linebreak/>
 NEW_DATA<linebreak/>
 MESSAGE_LOST<linebreak/>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: If Successful<linebreak/>
 CAN001_MO_NOT_FOUND: if message object not found<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>CanRecMsgObj;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(<ref refid="_c_a_n001_8h_1a33cfce269fb266684be1431b7dc70933" kindref="member">CAN001_GetMOFlagStatus</ref>(&amp;CAN001_Handle0,1,<ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab1384558eaf5a56dcf637e4f814ec3c1" kindref="member">RECEIVE_PENDING</ref>)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a3e8baab1eee0750a8d7310e58420bcaf" kindref="member">CAN001_ClearMOFlagStatus</ref>(&amp;CAN001_Handle0,1,<ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab1384558eaf5a56dcf637e4f814ec3c1" kindref="member">RECEIVE_PENDING</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>CAN<sp/>message<sp/>to<sp/>handle<sp/>CanRecMsgObj</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref>(&amp;CAN001_Handle0,&amp;CanRecMsgObj,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/></highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="893" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="888" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1aaa2383b3300ca5a8ab8501db8bd1effd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN001_ClearNodeFlagStatus</definition>
        <argsstring>(const CAN001_HandleType *Handle, CAN001_NodeStatusType NewNodeStatus)</argsstring>
        <name>CAN001_ClearNodeFlagStatus</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378" kindref="member">CAN001_NodeStatusType</ref></type>
          <declname>NewNodeStatus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the status bits of Node register NSRx. The input parameter can be a combination of enum type NodeStatus</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">NewNodeStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum value for deleting status bit<linebreak/>
 CAN001_ALERT_STATUS<linebreak/>
 CAN001_ERROR_WARN_STATUS<linebreak/>
 CAN001_BUS_OFF_STATUS<linebreak/>
 CAN001_LIST_LENGTH_ERROR<linebreak/>
 CAN001_LIST_OBJECT_ERROR<linebreak/>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a7d87336df18913baaac93a9776c47e6e" kindref="member">CAN001_SendDataFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a41cc6c91f9def74cd9db7d29e9b500b3" kindref="member">CAN001_GetNodeFlagStatus</ref>(&amp;CAN001_Handle0,<ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a9cd477140612350c94839d9b4ac97bc9" kindref="member">CAN001_ERROR_WARN_STATUS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/><ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a00c42e532df2ce88528fd93eb7a2f99c" kindref="member">CAN_SET</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1aaa2383b3300ca5a8ab8501db8bd1effd" kindref="member">CAN001_ClearNodeFlagStatus</ref>(&amp;CAN001_Handle0,<ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a9cd477140612350c94839d9b4ac97bc9" kindref="member">CAN001_ERROR_WARN_STATUS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="924" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="920" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n001_8c_1a6daaddccea102728a1428ee9e2c59b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CAN001_ClearMOPndRegisterBit</definition>
        <argsstring>(const CAN001_HandleType *Handle, uint8_t MsgObjnr)</argsstring>
        <name>CAN001_ClearMOPndRegisterBit</name>
        <param>
          <type>const <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>MsgObjnr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears message pending register bit of specific message object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN device Handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">MsgObjnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired logical message object no</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t DAVEApp_SUCCESS: If Successful<linebreak/>
 CAN001_MO_NOT_FOUND: if message object not found<linebreak/>
</para></simplesect>
<bold>Reentrant: NO </bold><linebreak/>
</para><para><linebreak/>
</para><para><bold>Example:</bold> <linebreak/>
<emphasis><bold>CAN001_Handle0</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_Handle0 contains all node related configuration. <linebreak/>
<emphasis><bold>CAN001_MessageHandle0_1</bold></emphasis> is a global structure of type <ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref> which will be configured in <ref refid="_c_a_n001___conf_8c" kindref="compound">CAN001_Conf.c</ref> file using UI parameters. CAN001_MessageHandle0_1 contains all message object related configuration. Number of Message handles generated will depend on No of Mo selected by the user. <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref><sp/>CanRecMsgObj;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Initializes<sp/>Apps<sp/>configurations<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DAVE_Init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Status<sp/>=<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Status<sp/>==<sp/>DAVEApp_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wait<sp/>till<sp/>data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(<ref refid="_c_a_n001_8h_1aea102a989fd23f0d96606b15b2bbe65e" kindref="member">CAN001_GetMOPndRegisterBitStatus</ref>(&amp;CAN001_Handle0,1)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a6daaddccea102728a1428ee9e2c59b68" kindref="member">CAN001_ClearMOPndRegisterBit</ref>(&amp;CAN001_Handle0,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>CAN<sp/>message<sp/>to<sp/>handle<sp/>CanRecMsgObj</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref>(&amp;CAN001_Handle0,&amp;CanRecMsgObj,1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>infinite<sp/>loop<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="941" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="940" bodyend="958"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_a_n001_8c_1a9337c4e8385ddc293e66593d90162ed1" prot="public" static="no">
        <name>APP_GID</name>
        <initializer>DBG002_GID_CAN001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="145" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a7a73d4649bd2b8329c9cb8bca0fb2f1a" prot="public" static="no">
        <name>CAN001_CLEAR_MO_STATUS_MASK</name>
        <initializer>(0x0000001BU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="148" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a16258e4ca8984766f9e61ede74ed0850" prot="public" static="no">
        <name>CAN001_CLEAR_NODE_STATUS_MASK</name>
        <initializer>(0x000003E0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="150" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a5823890853a5b23497d2c4ea2dc6b742" prot="public" static="no">
        <name>CAN001_LIST_BEGIN_BITMASK</name>
        <initializer>(0x000000FFU)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="152" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ae8bf529dc939dc9f16955d0883240ce1" prot="public" static="no">
        <name>CAN001_PANCMD_DYN_MO_DEALLOC</name>
        <initializer>(0x00000004U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="156" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a1fec2681ade2787aca5a483ffebb037d" prot="public" static="no">
        <name>CAN001_PANCMD_STATIC_MO_ALLOC</name>
        <initializer>(0x00000002U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="154" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a1218a347178900b5e0062b255647468e" prot="public" static="no">
        <name>DBG002_CRITICAL</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="131" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a548b86262fdcd8d66aab5aa8bdacdbf6" prot="public" static="no">
        <name>DBG002_ERROR</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="132" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ac221eaa527b90a30df0989112f0a9c44" prot="public" static="no">
        <name>DBG002_FUNCTION_ENTRY</name>
        <param><defname>GID</defname></param>
        <param><defname>Status</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="136" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a28d0bb7b83db333a83ba17698f2850fa" prot="public" static="no">
        <name>DBG002_FUNCTION_EXIT</name>
        <param><defname>GID</defname></param>
        <param><defname>Status</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="137" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a1a13d735d902b674887b98d20c770a00" prot="public" static="no">
        <name>DBG002_I</name>
        <param><defname>e</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="111" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ade30cb61424c9f6b644b46398c98769a" prot="public" static="no">
        <name>DBG002_ID</name>
        <param><defname>e</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="127" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a2fd63c036201396d1b2206315a91d395" prot="public" static="no">
        <name>DBG002_IG</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="112" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a293f98f9a8e9da0c6ff1793b007e3b7c" prot="public" static="no">
        <name>DBG002_IGH</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="115" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a4432237eb009d305131debac64706369" prot="public" static="no">
        <name>DBG002_IGHP</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="118" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1aaefd2ca5a8f5103a3295ed19b85f1933" prot="public" static="no">
        <name>DBG002_IGP</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="116" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a81f408f1248433ad1c3bcaf8f7eb298f" prot="public" static="no">
        <name>DBG002_IH</name>
        <param><defname>e</defname></param>
        <param><defname>h</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="113" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a2a4dac62b5a74aebbb56b24266d4c74a" prot="public" static="no">
        <name>DBG002_IHP</name>
        <param><defname>e</defname></param>
        <param><defname>h</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="117" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ad9a452d078d1479cd4b908272830e82b" prot="public" static="no">
        <name>DBG002_INFO</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="134" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a1a2ba8783653ffcc9ac76a60a2eedf37" prot="public" static="no">
        <name>DBG002_IP</name>
        <param><defname>e</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="114" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a3eadb37f252254827dd43dcada516991" prot="public" static="no">
        <name>DBG002_IS</name>
        <param><defname>e</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="128" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a2e2b31e6ec0200adb864b080b318bff1" prot="public" static="no">
        <name>DBG002_ISG</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="129" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" prot="public" static="no">
        <name>DBG002_MESSAGEID_LITERAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inclusion of header file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="109" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/UART001/UART001.c" bodystart="144" bodyend="-1"/>
        <referencedby refid="_c_a_n001_8c_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" compoundref="_c_a_n001_8c" startline="627" endline="717">CAN001_ReadMsgObj</referencedby>
        <referencedby refid="_c_a_n001_8c_1a7d87336df18913baaac93a9776c47e6e" compoundref="_c_a_n001_8c" startline="530" endline="571">CAN001_SendDataFrame</referencedby>
        <referencedby refid="_c_a_n001_8c_1a2b63fea4f457401ffa4899f3dacfd6cc" compoundref="_c_a_n001_8c" startline="578" endline="619">CAN001_SendRemoteFrame</referencedby>
        <referencedby refid="_c_a_n001_8c_1a68a886b4fc31200314a08ba112d063f8" compoundref="_c_a_n001_8c" startline="724" endline="783">CAN001_UpdateMODataRegisters</referencedby>
        <referencedby refid="_u_a_r_t001_8c_1ad82dcdca5a7770f4524e1527de95407b" compoundref="_u_a_r_t001_8c" startline="682" endline="746">UART001_Configure</referencedby>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a2a91183cf28ca0061c8f2c3287c61248" prot="public" static="no">
        <name>DBG002_N</name>
        <param><defname>e</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="119" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a178dbc2e9819f9f46a7dd64067f46785" prot="public" static="no">
        <name>DBG002_NG</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="120" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a13d74e37302b899787915648922859c9" prot="public" static="no">
        <name>DBG002_NGH</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="123" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a884054d1243d1abedb66a186e38bf36f" prot="public" static="no">
        <name>DBG002_NGHP</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="126" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a28e97ceeb00cc937007c1e30eab4fadf" prot="public" static="no">
        <name>DBG002_NGP</name>
        <param><defname>e</defname></param>
        <param><defname>g</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="124" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1af06f8cfc4d687b2e2a645f9941dc6bf7" prot="public" static="no">
        <name>DBG002_NH</name>
        <param><defname>e</defname></param>
        <param><defname>h</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="121" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ac1d29bc1974f7d1982b698eb6df03999" prot="public" static="no">
        <name>DBG002_NHP</name>
        <param><defname>e</defname></param>
        <param><defname>h</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="125" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a829838ff027a6fc15a192318887a8d48" prot="public" static="no">
        <name>DBG002_NP</name>
        <param><defname>e</defname></param>
        <param><defname>p</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="122" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1ad7ef812e0110adbee5573c5e7525139f" prot="public" static="no">
        <name>DBG002_RegisterCallBack</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="110" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a09a8f170ce01f357c0de22883d0af8ac" prot="public" static="no">
        <name>DBG002_SAFETY_CRITICAL</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="130" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a34c384d7413a39d6c859e28a8d863266" prot="public" static="no">
        <name>DBG002_TRACE</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="135" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n001_8c_1a6598553b0e67b93caa39d40505565146" prot="public" static="no">
        <name>DBG002_WARNING</name>
        <param><defname>groupid</defname></param>
        <param><defname>messageid</defname></param>
        <param><defname>length</defname></param>
        <param><defname>value</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" line="133" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CAN_Basic_CAN001 App provides non reentrant API&apos;s to configure the CAN Nodes which can be used in a non RTOS environment. It provides simple APIs to Configure CAN Nodes and to Send /Receive CAN Message objects. </para>    </briefdescription>
    <detaileddescription>
<para>Version CAN001 &lt;1.0.12&gt; </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/><sp/>DAVE<sp/>App<sp/>Name<sp/>:<sp/>CAN001<sp/><sp/><sp/><sp/><sp/><sp/><sp/>App<sp/>Version:<sp/>1.0.12<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/><sp/>This<sp/>file<sp/>is<sp/>generated<sp/>by<sp/>DAVE,<sp/>User<sp/>modification<sp/>to<sp/>this<sp/>file<sp/>will<sp/>be<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/><sp/>overwritten<sp/>at<sp/>the<sp/>next<sp/>code<sp/>generation.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*CODE_BLOCK_BEGIN[CAN001.c]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2014,<sp/>Infineon<sp/>Technologies<sp/>AG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>modification,are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holders<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>**</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without**<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>specific<sp/>prior<sp/>written<sp/>permission.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/><sp/>**</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>ARE<sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>LIABLE<sp/><sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/><sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>To<sp/>improve<sp/>the<sp/>quality<sp/>of<sp/>the<sp/>software,<sp/>users<sp/>are<sp/>encouraged<sp/>to<sp/>share<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>modifications,<sp/>enhancements<sp/>or<sp/>bug<sp/>fixes<sp/>with<sp/>Infineon<sp/>Technologies<sp/>AG<sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>dave@infineon.com).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="40"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="42"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="43"><highlight class="comment">**<sp/>PLATFORM<sp/>:<sp/>Infineon<sp/>XMC4000<sp/>Series<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="44"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="45"><highlight class="comment">**<sp/>COMPILER<sp/>:<sp/>Compiler<sp/>Independent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="46"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="47"><highlight class="comment">**<sp/>AUTHOR<sp/><sp/><sp/>:<sp/>App<sp/>Developer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="48"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="49"><highlight class="comment">**<sp/>MAY<sp/>BE<sp/>CHANGED<sp/>BY<sp/>USER<sp/>[yes/no]:<sp/>Yes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="50"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="51"><highlight class="comment">**<sp/>MODIFICATION<sp/>DATE<sp/>:<sp/>Jan<sp/>20,<sp/>2014<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="52"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="53"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="55"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author(s)<sp/>Identity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="56"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="57"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="58"><highlight class="comment">**<sp/>Initials<sp/><sp/><sp/><sp/><sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="59"><highlight class="comment">**<sp/>---------------------------------------------------------------------------**</highlight></codeline>
<codeline lineno="60"><highlight class="comment">**<sp/>NPJ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>App<sp/>Developer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="61"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="62"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment">*<sp/>Version<sp/>History<sp/>:<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment">*<sp/>12<sp/>Dec<sp/>2012<sp/><sp/><sp/><sp/>v1.0.2<sp/><sp/><sp/>1.<sp/>Initial<sp/>revision<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment">*<sp/>30<sp/>May<sp/>2013<sp/><sp/><sp/><sp/>v1.0.4<sp/><sp/><sp/>1.<sp/>MISRA<sp/>fixes.</highlight></codeline>
<codeline lineno="68"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Fixes<sp/>concerned<sp/>with<sp/>the<sp/>Rx<sp/>pin(14.3)<sp/>manual<sp/>configuration<sp/>issue.<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment">*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="comment">*<sp/>21<sp/>Jun<sp/>2013<sp/><sp/><sp/><sp/>v1.0.6<sp/><sp/><sp/>1.<sp/>Reset<sp/>of<sp/>INIT<sp/>&amp;<sp/>CCE<sp/>bit<sp/>has<sp/>been<sp/>removed<sp/>as<sp/>it<sp/>shall<sp/>be<sp/>handled<sp/>in<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MULTIPLEXER.c<sp/>file<sp/>of<sp/>DaveSupport<sp/>app.</highlight></codeline>
<codeline lineno="72"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Removed<sp/>the<sp/>code<sp/>concerned<sp/>with<sp/>PORTx_PDRx<sp/>&amp;<sp/>PORTx_IOCRx<sp/>register<sp/>modification</highlight></codeline>
<codeline lineno="73"><highlight class="comment">*<sp/>22<sp/>Aug<sp/>2013<sp/><sp/><sp/><sp/>v1.0.8<sp/><sp/><sp/>1.<sp/>Fixes<sp/>w.r.t<sp/>incorrect<sp/>code<sp/>generation<sp/>of<sp/>the<sp/>CAN<sp/>NodeId<sp/>due<sp/>to<sp/>multiple<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/>created<sp/>by<sp/>the<sp/>data<sp/>model<sp/>to<sp/>a<sp/>proxy<sp/>register</highlight></codeline>
<codeline lineno="75"><highlight class="comment">*<sp/>20<sp/>Jan<sp/>2014<sp/><sp/><sp/><sp/>v1.0.10<sp/><sp/><sp/>1.<sp/>C++<sp/>support<sp/>added.</highlight></codeline>
<codeline lineno="76"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Delay<sp/>in<sp/>app<sp/>instantiation<sp/>is<sp/>resolved.</highlight></codeline>
<codeline lineno="77"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>DBG002<sp/>App<sp/>changes<sp/>are<sp/>taken<sp/>care</highlight></codeline>
<codeline lineno="78"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="90"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>**<sp/>INCLUDE<sp/>FILES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMMY<sp/>DEFINTIONS<sp/>OF<sp/>DEBUG<sp/>LOG<sp/>MACROS</highlight></codeline>
<codeline lineno="100"><highlight class="comment">*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DUMMY<sp/>DEFINTIONS<sp/>OF<sp/>DEBUG<sp/>LOG<sp/>MACROS</highlight></codeline>
<codeline lineno="103"><highlight class="comment">*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*These<sp/>definitions<sp/>are<sp/>included<sp/>here<sp/>to<sp/>avoid<sp/>compilation<sp/>errors,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>since<sp/>the<sp/>DBG002<sp/>app<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>project.<sp/>All<sp/>the<sp/>macros<sp/>are<sp/>defined</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>as<sp/>empty*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_DBG002_H_</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBG002_MESSAGEID_LITERAL</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_RegisterCallBack(A,B,C)</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_I(e)<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IG(e,g)<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IH(e,h)<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IP(e,p)<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IGH(e,g,h)<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IGP(e,g,p)<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IHP(e,h,p)<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IGHP(e,g,h,p)<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_N(e)<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NG(e,g)<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NH(e,h)<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NP(e,p)<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NGH(e,g,h)<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NGP(e,g,p)<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NHP(e,h,p)<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_NGHP(e,g,h,p)<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_ID(e)<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_IS(e)<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_ISG(e,g)<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_CRITICAL(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_ERROR(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_WARNING(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_INFO(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_TRACE(groupid,messageid,length,value)</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_FUNCTION_ENTRY(GID,<sp/>Status)<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DBG002_FUNCTION_EXIT(GID,<sp/>Status)<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>defintions<sp/>of<sp/>dummy<sp/>Debug<sp/>Log<sp/>macros*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="143"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Macro<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="144"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_GID<sp/>DBG002_GID_CAN001</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>message<sp/>objects<sp/>status<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN001_CLEAR_MO_STATUS_MASK<sp/><sp/><sp/><sp/>(0x0000001BU)</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Node<sp/>Status<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN001_CLEAR_NODE_STATUS_MASK<sp/><sp/>(0x000003E0U)</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Macro<sp/>to<sp/>Enable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN001_LIST_BEGIN_BITMASK<sp/>(0x000000FFU)</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Panel<sp/>command<sp/>for<sp/>dynamic<sp/>MO<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN001_PANCMD_STATIC_MO_ALLOC<sp/>(0x00000002U)</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Panel<sp/>command<sp/>for<sp/>MO<sp/>deallocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN001_PANCMD_DYN_MO_DEALLOC<sp/>(0x00000004U)</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="160"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Type<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="161"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="165"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Function<sp/>Declarations:</highlight></codeline>
<codeline lineno="166"><highlight class="comment">*******************************************************************************/</highlight></codeline>
<codeline lineno="184"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lAllocateMOtoNodeList(uint8_t<sp/>List,uint8_t<sp/>MsgObjnr);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lDeallocateMsgObj(uint32_t<sp/>MsgObjnr);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lConfigMORegs</highlight></codeline>
<codeline lineno="212"><highlight class="normal">(</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref>*<sp/>MsgObjptr,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr</highlight></codeline>
<codeline lineno="215"><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lNodeInit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle);</highlight></codeline>
<codeline lineno="234"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="235"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Constant<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="236"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="239"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Variable<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="240"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="243"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Constant<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="244"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="247"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>like<sp/>macro<sp/>definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="248"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="250"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Private<sp/>Function<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="251"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>allocate<sp/>message<sp/>object<sp/>from<sp/>free<sp/>list<sp/>to<sp/>node<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lAllocateMOtoNodeList(uint8_t<sp/>List,<sp/>uint8_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_CAN001_nonAPI_1&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Panel<sp/>Command<sp/>for<sp/>dynamic<sp/>allocation<sp/>of<sp/>MO<sp/>to<sp/>node<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>CAN-&gt;PANCTR<sp/>=<sp/>((((uint32_t)List<sp/>+<sp/>1U)<sp/>&lt;&lt;<sp/>CAN_PANCTR_PANAR2_Pos)|<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)MsgObjnr<sp/>&lt;&lt;<sp/>CAN_PANCTR_PANAR1_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN001_PANCMD_STATIC_MO_ALLOC));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>until<sp/>panel<sp/>as<sp/>done<sp/>the<sp/>command<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(CAN-&gt;PANCTR<sp/>&amp;<sp/>CAN_PANCTR_BUSY_Msk))</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>deallocate<sp/>MO<sp/>from<sp/>Node<sp/>list<sp/>to<sp/>free<sp/>list<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lDeallocateMsgObj(uint32_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>FirstMoInList0<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_CAN001_nonAPI_2&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>FirstMoInList0<sp/>=<sp/>(CAN-&gt;LIST[0]<sp/>&amp;<sp/>CAN001_LIST_BEGIN_BITMASK);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Panel<sp/>Command<sp/>for<sp/>deallocation<sp/>of<sp/>MO<sp/>from<sp/>Node<sp/>List<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>CAN-&gt;PANCTR<sp/>=<sp/>((FirstMoInList0<sp/>&lt;&lt;<sp/>CAN_PANCTR_PANAR2_Pos)|<sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)MsgObjnr<sp/>&lt;&lt;<sp/>CAN_PANCTR_PANAR1_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN001_PANCMD_DYN_MO_DEALLOC));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>until<sp/>panel<sp/>as<sp/>done<sp/>the<sp/>command<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(CAN-&gt;PANCTR<sp/>&amp;<sp/>CAN_PANCTR_BUSY_Msk))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>configure<sp/>message<sp/>object<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lConfigMORegs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref>*<sp/>MsgObjptr,<sp/>uint8_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a5db4d5a87e671f966d02ef3390ccacc4" kindref="member">GET_MO_OFFSET</ref>(MsgObjnr);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Count<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_CAN001_nonAPI_3&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>Message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_RESMSGVAL_Msk;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755" kindref="member">CAN_FrameType</ref>)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a6647ab12f9419bdad35de0288d268dde" kindref="member">IDExten</ref><sp/>==<sp/><ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755abcab54b37d7dfec0fd175198732965ba" kindref="member">STANDARDTYPE</ref>)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>standard<sp/>identifier<sp/>and<sp/>identifier<sp/>mask*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAR<sp/>=<sp/>((((uint32_t)2UL<sp/>&lt;&lt;<sp/>CAN_MO_MOAR_PRI_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAR_PRI_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aaf7f5b0805c58511d90bcc2aec27ec1f" kindref="member">Identifier</ref><sp/>&lt;&lt;<sp/>CAN_MO_MOAR_STDID_Pos)<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAR_STDID_Msk));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a9fac8d157984b7967d152795a67e7894" kindref="member">IDEMask</ref><sp/>==<sp/>1U)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAMR<sp/>=<sp/>((((uint32_t)1UL<sp/>&lt;&lt;<sp/>CAN_MO_MOAMR_MIDE_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAMR_MIDE_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref><sp/>&lt;&lt;<sp/>CAN_MO_MOAR_STDID_Pos)<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAR_STDID_Msk));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAMR<sp/>=<sp/>((((uint32_t)0UL<sp/>&lt;&lt;<sp/>CAN_MO_MOAMR_MIDE_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAMR_MIDE_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)CAN_MO_MOAMR_AM_Msk<sp/>&amp;<sp/>(uint32_t)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref>));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>(MsgObjptr-&gt;IDExten<sp/>==<sp/>STANDARDTYPE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>Extended<sp/>identifier<sp/>and<sp/>identifier<sp/>mask*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAR<sp/>=<sp/>((((uint32_t)2UL<sp/>&lt;&lt;<sp/>CAN_MO_MOAR_PRI_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAR_PRI_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(CAN_MO_MOAR_ID_Msk<sp/>&amp;<sp/>MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aaf7f5b0805c58511d90bcc2aec27ec1f" kindref="member">Identifier</ref>))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)1UL<sp/>&lt;&lt;<sp/>CAN_MO_MOAR_IDE_Pos<sp/>)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAR_IDE_Msk));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAMR<sp/>=<sp/>(((uint32_t)((uint32_t)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a9fac8d157984b7967d152795a67e7894" kindref="member">IDEMask</ref><sp/>&lt;&lt;<sp/>CAN_MO_MOAMR_MIDE_Pos)<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)CAN_MO_MOAMR_MIDE_Msk)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(CAN_MO_MOAMR_AM_Msk<sp/>&amp;<sp/>MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref>));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>whether<sp/>message<sp/>object<sp/>is<sp/>transmit<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_3_2&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1acc9aa2394ba4d8f72635b9cfe6a41f5e" kindref="member">MsgObjType</ref><sp/>==<sp/><ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a4e0950690937ec9a19c3cf5277739cdd" kindref="member">TRANSMSGOBJ</ref>)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>data<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MOFCR,<sp/>(uint32_t)CAN_MO_MOFCR_DLC_Msk,<sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOFCR_DLC_Pos,<sp/>(uint32_t)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac47fe7fa9902f1232f8bec52c840666c" kindref="member">DataLength</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>Data<sp/>registers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Count<sp/>=<sp/>0U;<sp/>Count<sp/>&lt;<sp/>MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac47fe7fa9902f1232f8bec52c840666c" kindref="member">DataLength</ref>;<sp/>Count++)<sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Count<sp/>&lt;<sp/>4U)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MODATAL,<sp/>(uint32_t)((uint32_t)CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>(Count*8U)),<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Count*8U),(uint32_t)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[Count]);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MODATAH,<sp/>(uint32_t)(CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>((Count-4U)*8U)),<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Count-4U)*8U),<sp/>(uint32_t)MsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[Count]);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>if(Count<sp/>&lt;<sp/>4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">/*<sp/>for(Count<sp/>=<sp/>0;<sp/>Count<sp/>&lt;<sp/>MsgObjptr-&gt;DataLength;<sp/>Count++)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>MO<sp/>as<sp/>Transmit<sp/>message<sp/>object<sp/>and<sp/>set<sp/>NEWDAT<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>(CAN_MO_MOCTR_SETDIR_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETNEWDAT_Msk);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">/*if<sp/>(MsgType<sp/>==<sp/>TRANSMSGOBJ)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_3_3&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>MO<sp/>as<sp/>Receive<sp/>message<sp/>object<sp/>and<sp/>set<sp/>RXEN<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_RESDIR_Msk;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*if(MsgType<sp/>==<sp/>RECMSGOBJ)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>RTSEL<sp/>and<sp/>Set<sp/>MSGVAL<sp/>,TXEN0<sp/>and<sp/>TXEN1<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>(CAN_MO_MOCTR_SETTXEN0_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETTXEN1_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETRXEN_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETMSGVAL_Msk<sp/>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>will<sp/>initialize<sp/>node<sp/>with<sp/>the<sp/>given<sp/>handle<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAN001_lNodeInit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count<sp/><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>CAN_MO0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&lt;&lt;&lt;DD_CAN001_nonAPI_4&gt;&gt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>to<sp/>node<sp/>register<sp/>offset<sp/>as<sp/>per<sp/>node<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>CAN_NODE_TypeDef*<sp/>CAN_NodexRegs<sp/>=<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a0cf8964fb7868c66bac2df22f4a43b17" kindref="member">CanNodeRegs</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>until<sp/>panel<sp/>has<sp/>finished<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(CAN-&gt;PANCTR<sp/>&amp;<sp/>CAN_PANCTR_BUSY_Msk))</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>CCE<sp/>and<sp/>INIT<sp/>bit<sp/>NCR<sp/>for<sp/>node<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Alert<sp/>and<sp/>last<sp/>error<sp/>code<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NCR<sp/>|=<sp/>((uint32_t)CAN_NODE_NCR_INIT_Msk<sp/>|<sp/>(uint32_t)CAN_NODE_NCR_CCE_Msk);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>bit<sp/>timing<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NBTR<sp/>=<sp/>((uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a09e538a9a51361f86cb46ad2ac031d9e" kindref="member">BaudRate</ref>.<ref refid="struct_c_a_n001___baud_rate_type_1a6c095b9155183be48054c3ee536ec95a" kindref="member">DIV8</ref><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_NODE_NBTR_DIV8_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a09e538a9a51361f86cb46ad2ac031d9e" kindref="member">BaudRate</ref>.<ref refid="struct_c_a_n001___baud_rate_type_1ad8735fe6ad4c40a16fd452c678482fde" kindref="member">TimeSEG2</ref><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_NODE_NBTR_TSEG2_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a09e538a9a51361f86cb46ad2ac031d9e" kindref="member">BaudRate</ref>.<ref refid="struct_c_a_n001___baud_rate_type_1a3457fbd3975bd364601a75011db1f0f6" kindref="member">TimeSEG1</ref><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_NODE_NBTR_TSEG1_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a09e538a9a51361f86cb46ad2ac031d9e" kindref="member">BaudRate</ref>.<ref refid="struct_c_a_n001___baud_rate_type_1accbe463421a5ec74349123283323f615" kindref="member">SyncJumpWidth</ref><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_NODE_NBTR_SJW_Pos)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a09e538a9a51361f86cb46ad2ac031d9e" kindref="member">BaudRate</ref>.<ref refid="struct_c_a_n001___baud_rate_type_1a6df3c8aeea0fa6402c774fd66cf2623c" kindref="member">BaudRatePresc</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>whether<sp/>loop<sp/>back<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>if<sp/>(<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a447f305d32ce441c6c97f78b064c949c" kindref="member">LoopBackModeEn</ref><sp/>==<sp/><ref refid="_c_a_n001_8h_1aa57c6c45498a3c66e8d522d49a9fb772" kindref="member">CAN001_ENABLE</ref>)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_BIT(CAN_NodexRegs-&gt;NPCR,<sp/>CAN_NODE_NPCR_LBM_Pos);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>required<sp/>number<sp/>of<sp/>message<sp/>object<sp/>to<sp/>node<sp/>list<sp/></highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>and<sp/>configure<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Count<sp/>=<sp/>0U;<sp/>Count<sp/>&lt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>;<sp/>Count++)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN001_lAllocateMOtoNodeList(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1ac4e6a73aa11347a618d4c513163f23b4" kindref="member">NodeID</ref>,<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref><sp/>+<sp/>Count));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref><sp/>+<sp/>Count);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a5db4d5a87e671f966d02ef3390ccacc4" kindref="member">GET_MO_OFFSET</ref>(MsgNo);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>MPN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOIPR<sp/>=<sp/>(((uint32_t)Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1ac4e6a73aa11347a618d4c513163f23b4" kindref="member">NodeID</ref><sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_MO_MOIPR_MPN_Pos<sp/>+<sp/>5))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Count<sp/>&lt;&lt;<sp/>CAN_MO_MOIPR_MPN_Pos));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="410"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Public<sp/>Function<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="411"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="comment">/*<sp/>This<sp/>function<sp/>will<sp/>initialize<sp/>node<sp/>with<sp/>the<sp/>given<sp/>handle<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420" refid="_c_a_n001_8c_1a475ef2c34ceab6f92690100e4f437581" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n001_8h_1a475ef2c34ceab6f92690100e4f437581" kindref="member">CAN001_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calling<sp/>CANGLOBAL<sp/>App<sp/>Initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n_g_l_o_b_a_l_8h_1a2a63e2e9c03562d237bbfca3bd8052fd" kindref="member">CANGLOBAL_Init</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Node1<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>CAN001_lNodeInit(&amp;CAN001_Handle0);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LMO1<sp/>Initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>(void)<ref refid="_c_a_n001_8h_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" kindref="member">CAN001_ConfigMsgObj</ref>(&amp;CAN001_Handle0,&amp;CAN001_MessageHandle0_1,1U);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LMO2<sp/>Initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>(void)<ref refid="_c_a_n001_8h_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" kindref="member">CAN001_ConfigMsgObj</ref>(&amp;CAN001_Handle0,&amp;CAN001_MessageHandle0_2,2U);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>receive<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_a_n001_8h_1a44536097dee182603597ad75d5fd5aa0" kindref="member">EnableMOInterrupt</ref>(CAN001_Handle0,(uint32_t)<ref refid="_c_a_n___types_8h_1a416ebf885926acd92f835ee132ed8ac6aa400549c45e92629dc4b6d4a2643352e" kindref="member">CAN_MO_RECEIVE_INTERRUPT</ref>,2);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>will<sp/>deinitialize<sp/>node<sp/>with<sp/>the<sp/>given<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_2&gt;&gt;&gt;*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="440" refid="_c_a_n001_8c_1aa5a37c13321cc60553c418c5828308b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n001_8h_1aa5a37c13321cc60553c418c5828308b1" kindref="member">CAN001_NodeDeInit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>int32_t<sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>MsgPndRegOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>CAN_MO0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>to<sp/>node<sp/>register<sp/>offser<sp/>as<sp/>per<sp/>node<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>CAN_NODE_TypeDef*<sp/>CAN_NodexRegs<sp/>=<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a0cf8964fb7868c66bac2df22f4a43b17" kindref="member">CanNodeRegs</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>all<sp/>message<sp/>object<sp/>registers<sp/>and<sp/>deallocate<sp/>to<sp/>free<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Count<sp/>=<sp/>(int32_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>)-1;<sp/>Count<sp/>&gt;=<sp/>0;<sp/>Count--)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(uint32_t)Count);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a5db4d5a87e671f966d02ef3390ccacc4" kindref="member">GET_MO_OFFSET</ref>(MsgNo);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>all<sp/>message<sp/>objects<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOFCR<sp/>=<sp/><sp/>(0x00000000U);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOIPR<sp/>&amp;=<sp/>(0x000000FFU);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAMR<sp/>=<sp/>(0x3FFFFFFFU);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MODATAL<sp/>=<sp/>(0x00000000U);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MODATAH<sp/>=<sp/>(0x00000000U);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOAR<sp/>=<sp/>(0x00000000U);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>(0x00000FFFU);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN001_lDeallocateMsgObj(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(uint32_t)Count);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>CCE<sp/>and<sp/>INIT<sp/>bit<sp/>NCR<sp/>for<sp/>disconnecting<sp/>the<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NCR<sp/>=<sp/>(0x00000041U);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>all<sp/>node<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NSR<sp/>=<sp/>(0x00000000U);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NPCR<sp/>&amp;=<sp/>(0x0000000FU);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NECNT<sp/>=<sp/>(0x00600000U);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NFCR<sp/>=<sp/>(0x00000000U);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NBTR<sp/>=<sp/>(0x00000000U);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>MsgPndRegOffset<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a6500abb80c2aae80ff47839a9e371bb7" kindref="member">GET_MSGPND_OFFSET</ref>(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1ac4e6a73aa11347a618d4c513163f23b4" kindref="member">NodeID</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>(*MsgPndRegOffset)<sp/>=<sp/>(0x00000000U);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>will<sp/>configure<sp/>message<sp/>object<sp/>as<sp/>per<sp/>the<sp/>message<sp/>handle</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/><sp/>passed<sp/>to<sp/>the<sp/>function.<sp/>Function<sp/>will<sp/>either<sp/>Enable<sp/>or<sp/>Disable<sp/>as<sp/>per</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/><sp/>input<sp/>parameter</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" kindref="member">CAN001_ConfigMsgObj</ref></highlight></codeline>
<codeline lineno="484" refid="_c_a_n001_8c_1ac5cd7b0d0e5631e7a9b70dd31e18cce0" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref>*<sp/>SwMsgObjptr,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a34bfc2c1afefdabb22d1b86917f22944" kindref="member">CAN001_MO_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a6647ab12f9419bdad35de0288d268dde" kindref="member">IDExten</ref><sp/>!=<sp/>(uint8_t)<ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755abcab54b37d7dfec0fd175198732965ba" kindref="member">STANDARDTYPE</ref>)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a6647ab12f9419bdad35de0288d268dde" kindref="member">IDExten</ref><sp/>!=<sp/>(uint8_t)<ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755aa6416b9f541d8aef2bf030849436041b" kindref="member">EXTENDEDTYPE</ref>))</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>||((SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aeb8a55dff97e577090d197939e21c0a5" kindref="member">MsgObjEN</ref><sp/>!=<sp/><ref refid="_c_a_n001_8h_1aa57c6c45498a3c66e8d522d49a9fb772" kindref="member">CAN001_ENABLE</ref>)<sp/>&amp;&amp;<sp/>(SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aeb8a55dff97e577090d197939e21c0a5" kindref="member">MsgObjEN</ref><sp/>!=<sp/><ref refid="_c_a_n001_8h_1a0db285b7ec3ea188584f12d3f4078e21" kindref="member">CAN001_DISABLE</ref>))</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>||((SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1acc9aa2394ba4d8f72635b9cfe6a41f5e" kindref="member">MsgObjType</ref><sp/>!=<sp/><ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a3b90dbd0c322f709c72ec3a184eb10f2" kindref="member">RECMSGOBJ</ref>)<sp/>&amp;&amp;<sp/>(SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1acc9aa2394ba4d8f72635b9cfe6a41f5e" kindref="member">MsgObjType</ref><sp/>!=<sp/><ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a4e0950690937ec9a19c3cf5277739cdd" kindref="member">TRANSMSGOBJ</ref>)))</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/><sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7ae02350131a2980c5c1781a0334d9300b" kindref="member">CAN001_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___debug_log__apidoc_1ga9deb302be0d1e44cf2a50dd0b689877a" kindref="member">ERROR</ref>(DBG002_GID_CAN001,Error,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>object<sp/>is<sp/>to<sp/>be<sp/>disabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_3_1&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aeb8a55dff97e577090d197939e21c0a5" kindref="member">MsgObjEN</ref><sp/>==<sp/><ref refid="_c_a_n001_8h_1a0db285b7ec3ea188584f12d3f4078e21" kindref="member">CAN001_DISABLE</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>MSGVAL<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_RESMSGVAL_Msk;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>(SwMsgObjptr-&gt;MsgObjEN<sp/>==<sp/>CAN001_DISABLE)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN001_lConfigMORegs(SwMsgObjptr,<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U)));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*if<sp/>(SwMsgObjptr-&gt;MsgObjEN<sp/>==<sp/>CAN001_ENABLE)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>is<sp/>will<sp/>put<sp/>a<sp/>transmit<sp/>request<sp/>to<sp/>transmit<sp/>message<sp/>object<sp/></highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>sending<sp/>data<sp/>frame</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="530" refid="_c_a_n001_8c_1a7d87336df18913baaac93a9776c47e6e" refkind="member"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a7d87336df18913baaac93a9776c47e6e" kindref="member">CAN001_SendDataFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/>uint8_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>object<sp/>is<sp/>not<sp/>a<sp/>transmit<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_4_1&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_DIR_Msk,<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_DIR_Pos)<sp/>!=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a4e0950690937ec9a19c3cf5277739cdd" kindref="member">TRANSMSGOBJ</ref>)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a54845798de3d3fea7f51468df53e7891" kindref="member">CAN001_MO_NOT_ACCEPTABLE</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>is<sp/>disabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_MSGVAL_Msk,<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_MSGVAL_Pos)<sp/>==<sp/>0U)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a9b25b7b797d89c1cdd008db73e64ca77" kindref="member">CAN001_MSGOBJ_DISABLED</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_INFO(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>transmission<sp/>is<sp/>ongoing<sp/>on<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_4_2&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_TXRQ_Msk,<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_TXRQ_Pos)<sp/>==<sp/>1U)<sp/><sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7ae74cf79d8534712871f6302397affb3f" kindref="member">CAN001_MO_BUSY</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_INFO(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>TXRQ<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_4_3&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_SETTXRQ_Msk;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>is<sp/>will<sp/>put<sp/>a<sp/>transmit<sp/>request<sp/>to<sp/>receive<sp/>message<sp/>object<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>sending<sp/>remote<sp/>frame</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="_c_a_n001_8c_1a2b63fea4f457401ffa4899f3dacfd6cc" refkind="member"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a2b63fea4f457401ffa4899f3dacfd6cc" kindref="member">CAN001_SendRemoteFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/>uint8_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Error<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>DBG002_N<sp/>((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>object<sp/>is<sp/>a<sp/>receive<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_5_1&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_DIR_Msk,<sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_DIR_Pos)<sp/>!=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a3b90dbd0c322f709c72ec3a184eb10f2" kindref="member">RECMSGOBJ</ref>)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a54845798de3d3fea7f51468df53e7891" kindref="member">CAN001_MO_NOT_ACCEPTABLE</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>is<sp/>disabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_MSGVAL_Msk,<sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_MSGVAL_Pos)<sp/>==<sp/>0U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a9b25b7b797d89c1cdd008db73e64ca77" kindref="member">CAN001_MSGOBJ_DISABLED</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_INFO(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>transmission<sp/>is<sp/>ongoing<sp/>on<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_5_2&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_TXRQ_Msk,<sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_TXRQ_Pos)<sp/>==<sp/>1U)<sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7ae74cf79d8534712871f6302397affb3f" kindref="member">CAN001_MO_BUSY</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_INFO(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>transmit<sp/>request<sp/>to<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_5_3&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_SETTXRQ_Msk;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>is<sp/>will<sp/>read<sp/>the<sp/>message<sp/>object<sp/>data<sp/>bytes<sp/></highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/><sp/>into<sp/>message<sp/>pointer<sp/>passed<sp/>as<sp/>input<sp/>parameter</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" kindref="member">CAN001_ReadMsgObj</ref></highlight></codeline>
<codeline lineno="627" refid="_c_a_n001_8c_1a2ca41d6e601f94fcf3b8d59b1eeb5d44" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><ref refid="struct_c_a_n001___message_handle_type" kindref="compound">CAN001_MessageHandleType</ref>*<sp/>SwMsgObjptr,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/>uint8_t<sp/>MsgObjnr</highlight></codeline>
<codeline lineno="631"><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RxPnd<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NewData<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>object<sp/>is<sp/>a<sp/>receive<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_6_1&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_DIR_Msk,<sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_DIR_Pos)<sp/>!=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a3b90dbd0c322f709c72ec3a184eb10f2" kindref="member">RECMSGOBJ</ref>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a54845798de3d3fea7f51468df53e7891" kindref="member">CAN001_MO_NOT_ACCEPTABLE</ref>;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>reception<sp/>is<sp/>ongoing<sp/>on<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_6_2&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_RXUPD_Msk,<sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_RXUPD_Pos)<sp/>==<sp/>1U)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7ae74cf79d8534712871f6302397affb3f" kindref="member">CAN001_MO_BUSY</ref>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>message<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CAN001_API_6_3&gt;&gt;&gt;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_RESNEWDAT_Msk;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((RD_REG(CAN_MOxRegs-&gt;MOAR,<sp/>CAN_MO_MOAR_IDE_Msk<sp/>,<sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOAR_IDE_Pos))<sp/>==<sp/>0U)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a6647ab12f9419bdad35de0288d268dde" kindref="member">IDExten</ref><sp/>=<sp/>(uint8_t)<ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755abcab54b37d7dfec0fd175198732965ba" kindref="member">STANDARDTYPE</ref>;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aaf7f5b0805c58511d90bcc2aec27ec1f" kindref="member">Identifier</ref><sp/>=<sp/>(CAN_MOxRegs-&gt;MOAR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAR_STDID_Msk)<sp/>&gt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOAR_STDID_Pos;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a9fac8d157984b7967d152795a67e7894" kindref="member">IDEMask</ref><sp/>=<sp/>(uint8_t)((uint32_t)(CAN_MOxRegs-&gt;MOAMR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAMR_MIDE_Msk)<sp/>&gt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOAMR_MIDE_Pos);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a9fac8d157984b7967d152795a67e7894" kindref="member">IDEMask</ref><sp/>==<sp/>1U)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref><sp/>=<sp/>(CAN_MOxRegs-&gt;MOAMR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAR_STDID_Msk)<sp/>&gt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOAR_STDID_Pos;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref><sp/>=<sp/>CAN_MOxRegs-&gt;MOAMR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAMR_AM_Msk;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a6647ab12f9419bdad35de0288d268dde" kindref="member">IDExten</ref><sp/>=<sp/>(uint8_t)<ref refid="_c_a_n___types_8h_1aa4291dd779e96fa11cced84c89204755aa6416b9f541d8aef2bf030849436041b" kindref="member">EXTENDEDTYPE</ref>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1aaf7f5b0805c58511d90bcc2aec27ec1f" kindref="member">Identifier</ref><sp/>=<sp/>CAN_MOxRegs-&gt;MOAR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAR_ID_Msk;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac0ddaf1b43f4fbf9b5eb0bf00129a289" kindref="member">IDMask</ref><sp/>=<sp/>CAN_MOxRegs-&gt;MOAMR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAMR_AM_Msk;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a9fac8d157984b7967d152795a67e7894" kindref="member">IDEMask</ref><sp/>=<sp/>(uint8_t)((uint32_t)(CAN_MOxRegs-&gt;MOAMR<sp/>&amp;<sp/>(uint32_t)CAN_MO_MOAMR_MIDE_Msk)<sp/>&gt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOAMR_MIDE_Pos);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac47fe7fa9902f1232f8bec52c840666c" kindref="member">DataLength</ref><sp/>=<sp/>(uint8_t)RD_REG(CAN_MOxRegs-&gt;MOFCR,<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOFCR_DLC_Msk,<sp/>CAN_MO_MOFCR_DLC_Pos);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Count<sp/>=<sp/>0U;<sp/>Count<sp/>&lt;<sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1ac47fe7fa9902f1232f8bec52c840666c" kindref="member">DataLength</ref>;<sp/>Count++)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Count<sp/>&lt;<sp/>4U)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[Count]<sp/>=<sp/>(uint8_t)RD_REG(CAN_MOxRegs-&gt;MODATAL,<sp/>\</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>(Count*8U)),<sp/>\</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Count*8U));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1a7fe8f81d0901b29dc57c5b114b029019" kindref="member">data</ref>[Count]<sp/>=<sp/>(uint8_t)RD_REG(CAN_MOxRegs-&gt;MODATAH,<sp/>\</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>((Count-4U)*8U))<sp/>,\</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Count-4U)*8U));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RxPnd<sp/>=<sp/>(bool)<ref refid="_c_a_n___types_8h_1a6f6200e41d2d0cf263e7ab0f57e70847" kindref="member">CHECK_RXPND_BIT</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NewData<sp/>=<sp/>(bool)<ref refid="_c_a_n___types_8h_1a8fb7410915ca07a2ea16e91ffe46e213" kindref="member">CHECK_NEWDATA_BIT</ref>();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((RxPnd<sp/>!=<sp/>0U)<sp/>&amp;&amp;<sp/>(NewData<sp/>!=<sp/>0U));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>SwMsgObjptr-&gt;<ref refid="struct_c_a_n001___message_handle_type_1acc9aa2394ba4d8f72635b9cfe6a41f5e" kindref="member">MsgObjType</ref><sp/>=<sp/><ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a3b90dbd0c322f709c72ec3a184eb10f2" kindref="member">RECMSGOBJ</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>function<sp/>updates<sp/>data<sp/>registers<sp/>of<sp/>given<sp/>message<sp/></highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/><sp/>object</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a68a886b4fc31200314a08ba112d063f8" kindref="member">CAN001_UpdateMODataRegisters</ref></highlight></codeline>
<codeline lineno="724" refid="_c_a_n001_8c_1a68a886b4fc31200314a08ba112d063f8" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>uint8_t<sp/>DataLength,<sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>DataPtr</highlight></codeline>
<codeline lineno="729"><highlight class="normal">)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Count<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DataLength<sp/>&gt;<sp/>8U)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7ae02350131a2980c5c1781a0334d9300b" kindref="member">CAN001_INVALID_INPUT</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>message<sp/>object<sp/>is<sp/>not<sp/>a<sp/>transmit<sp/>message<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>RD_REG(CAN_MOxRegs-&gt;MOSTAT,<sp/>CAN_MO_MOSTAT_DIR_Msk,<sp/>\</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOSTAT_DIR_Pos)<sp/>!=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1ae5a43debd74b395db5dd39690e897f78a4e0950690937ec9a19c3cf5277739cdd" kindref="member">TRANSMSGOBJ</ref>)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a54845798de3d3fea7f51468df53e7891" kindref="member">CAN001_MO_NOT_ACCEPTABLE</ref>;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_ERROR(APP_GID,<sp/><ref refid="_c_a_n001_8c_1a9b86ffdd029deeea8fea0070a7f9ac9d" kindref="member">DBG002_MESSAGEID_LITERAL</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Error),<sp/>&amp;Error);<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN_MO_MOCTR_RESMSGVAL_Msk;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>data<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MOFCR,<sp/>(uint32_t)CAN_MO_MOFCR_DLC_Msk,<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOFCR_DLC_Pos,<sp/>(uint32_t)DataLength);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Count<sp/>=<sp/>0U;<sp/>Count<sp/>&lt;<sp/>DataLength;<sp/>Count++)<sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Count<sp/>&lt;<sp/>4U)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MODATAL,<sp/>(uint32_t)(CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>(Count*8U))<sp/>,<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Count*8U),<sp/>(uint32_t)(*(DataPtr<sp/>+<sp/>Count)));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WR_REG(CAN_MOxRegs-&gt;MODATAH,<sp/>(uint32_t)(CAN_MO_MODATAL_DB0_Msk<sp/>&lt;&lt;<sp/>((Count-4U)*8U)),<sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Count-4U)*8U),<sp/>(uint32_t)(*(DataPtr<sp/>+<sp/>Count)));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>RTSEL<sp/>and<sp/>Set<sp/>MSGVAL<sp/>,TXEN0<sp/>and<sp/>TXEN1,<sp/>NEWDATA<sp/>and<sp/>RXEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>(CAN_MO_MOCTR_SETTXEN0_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETTXEN1_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETRXEN_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETMSGVAL_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETNEWDAT_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_SETRXEN_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_MO_MOCTR_RESRTSEL_Msk);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>message<sp/>object<sp/>specified.<sp/></highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>flag<sp/>value<sp/>to<sp/>be<sp/>returned<sp/>should<sp/>be<sp/>passed<sp/>as<sp/>input<sp/>parameter<sp/>of<sp/></highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/><sp/><sp/>type<sp/>MsgStatus<sp/></highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a33cfce269fb266684be1431b7dc70933" kindref="member">CAN001_GetMOFlagStatus</ref></highlight></codeline>
<codeline lineno="794" refid="_c_a_n001_8c_1a33cfce269fb266684be1431b7dc70933" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr,<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78" kindref="member">CAN_MsgStatusType</ref><sp/>NewMsgStatus</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>DBG002_N((NewMsgStatus<sp/>!=<sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab1384558eaf5a56dcf637e4f814ec3c1" kindref="member">RECEIVE_PENDING</ref>)<sp/>&amp;&amp;<sp/>(NewMsgStatus<sp/>!=<sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ab854ca69d47f7272ee6d53163b6d3cc6" kindref="member">TRANSMIT_PENDING</ref>)<sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(NewMsgStatus<sp/>!=<sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78ad2334a03756e7765d8b6e528721d2cb5" kindref="member">NEW_DATA</ref>)<sp/>&amp;&amp;<sp/>(NewMsgStatus<sp/>!=<sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78a250c579c6249f924396f316b24f11c31" kindref="member">MESSAGE_LOST</ref>));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>message<sp/>object<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CAN_MOxRegs-&gt;MOSTAT<sp/>&amp;<sp/>(uint32_t)NewMsgStatus)<sp/>!=<sp/>0U)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a00c42e532df2ce88528fd93eb7a2f99c" kindref="member">CAN_SET</ref>;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a6ab974c1136b3d623cfa385c607333eb" kindref="member">CAN_RESET</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>node<sp/>specified.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/><sp/><sp/>The<sp/>flag<sp/>value<sp/>to<sp/>be<sp/>returned<sp/>should<sp/>be<sp/>passed<sp/>as<sp/>input<sp/>parameter<sp/></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/><sp/><sp/>of<sp/>type<sp/>MsgStatusType.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a41cc6c91f9def74cd9db7d29e9b500b3" kindref="member">CAN001_GetNodeFlagStatus</ref></highlight></codeline>
<codeline lineno="832" refid="_c_a_n001_8c_1a41cc6c91f9def74cd9db7d29e9b500b3" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378" kindref="member">CAN001_NodeStatusType</ref><sp/>NewNodeStatus</highlight></codeline>
<codeline lineno="835"><highlight class="normal">)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>Node<sp/>Register<sp/>offset<sp/>value*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>CAN_NODE_TypeDef*<sp/>CAN_NodexRegs<sp/>=<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a0cf8964fb7868c66bac2df22f4a43b17" kindref="member">CanNodeRegs</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>DBG002_N((NewNodeStatus<sp/>!=<sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a9bad51e54ff815920a35aac7cd51ea8b" kindref="member">CAN001_ALERT_STATUS</ref>)<sp/>&amp;&amp;<sp/>(NewNodeStatus<sp/>!=<sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a9cd477140612350c94839d9b4ac97bc9" kindref="member">CAN001_ERROR_WARN_STATUS</ref>)<sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(NewNodeStatus<sp/>!=<sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378ad2d3d22a0c1069ffc789089912a122c0" kindref="member">CAN001_BUS_OFF_STATUS</ref>)<sp/>&amp;&amp;<sp/>(NewNodeStatus<sp/><sp/>!=<sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a55e99d97b77a0f98593bf9f0d7696364" kindref="member">CAN001_LIST_LENGTH_ERROR</ref>)\</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(NewNodeStatus<sp/>!=<sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378a5a958aec2d38088f6fdc42cba552a707" kindref="member">CAN001_LIST_OBJECT_ERROR</ref>));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>Node<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CAN_NodexRegs-&gt;NSR<sp/>&amp;<sp/>(uint32_t)NewNodeStatus)<sp/>!=<sp/>0U)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a00c42e532df2ce88528fd93eb7a2f99c" kindref="member">CAN_SET</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n___types_8h_1a37a3c5bdee73f6a650d5f909d1ce91a4a6ab974c1136b3d623cfa385c607333eb" kindref="member">CAN_RESET</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>function<sp/>will<sp/>return<sp/>the<sp/>message<sp/>object&apos;s<sp/>message<sp/></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/><sp/>pending<sp/>register<sp/>bit<sp/>value</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1aea102a989fd23f0d96606b15b2bbe65e" kindref="member">CAN001_GetMOPndRegisterBitStatus</ref></highlight></codeline>
<codeline lineno="865" refid="_c_a_n001_8c_1aea102a989fd23f0d96606b15b2bbe65e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr</highlight></codeline>
<codeline lineno="868"><highlight class="normal">)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>MsgPndRegOffset;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>DBG002_N((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>MsgPndRegOffset<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a6500abb80c2aae80ff47839a9e371bb7" kindref="member">GET_MSGPND_OFFSET</ref>(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1ac4e6a73aa11347a618d4c513163f23b4" kindref="member">NodeID</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>Status<sp/>=<sp/>RD_REG((*MsgPndRegOffset),<sp/>(CAN_MSPND_PND_Msk<sp/>&lt;&lt;<sp/>(MsgObjnr-1U)),<sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>clear<sp/>the<sp/>status<sp/>bits<sp/>of<sp/>message<sp/>object</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/><sp/>register<sp/>MOSTATx.<sp/>The<sp/>input<sp/>parameter<sp/>can<sp/>be<sp/>a<sp/>combination<sp/>of<sp/></highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*<sp/><sp/>enum<sp/>type<sp/>MsgStatus</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a3e8baab1eee0750a8d7310e58420bcaf" kindref="member">CAN001_ClearMOFlagStatus</ref></highlight></codeline>
<codeline lineno="888" refid="_c_a_n001_8c_1a3e8baab1eee0750a8d7310e58420bcaf" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgObjnr,<sp/></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n___types_8h_1a3ab9cf3d4665584b0f695f3ced93ea78" kindref="member">CAN_MsgStatusType</ref><sp/>NewMsgStatus</highlight></codeline>
<codeline lineno="892"><highlight class="normal">)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>uint8_t<sp/>MsgNo<sp/>=<sp/>(uint8_t)(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1aaab97e2c1318507e4321bcf90fa25717" kindref="member">FirstMOMapping</ref>+(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>message<sp/>object<sp/>offset<sp/>value*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>CAN_MO_TypeDef*<sp/>CAN_MOxRegs<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GET_MO_OFFSET(MsgNo);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>))</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a34bfc2c1afefdabb22d1b86917f22944" kindref="member">CAN001_MO_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___debug_log__apidoc_1ga9deb302be0d1e44cf2a50dd0b689877a" kindref="member">ERROR</ref>(DBG002_GID_CAN001,Status,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_MOxRegs-&gt;MOCTR<sp/>=<sp/>CAN001_CLEAR_MO_STATUS_MASK<sp/>&amp;<sp/>(uint32_t)NewMsgStatus;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>clear<sp/>the<sp/>status<sp/>bits<sp/>of<sp/>Node<sp/></highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/><sp/><sp/>register<sp/>NSRx.<sp/>The<sp/>input<sp/>parameter<sp/>can<sp/>be<sp/>a<sp/>combination</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/><sp/><sp/>of<sp/>enum<sp/>type<sp/>NodeStatus<sp/><sp/></highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n001_8h_1aaa2383b3300ca5a8ab8501db8bd1effd" kindref="member">CAN001_ClearNodeFlagStatus</ref></highlight></codeline>
<codeline lineno="920" refid="_c_a_n001_8c_1aaa2383b3300ca5a8ab8501db8bd1effd" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><ref refid="_c_a_n001_8h_1aff23690298b247619426653a71d5c378" kindref="member">CAN001_NodeStatusType</ref><sp/>NewNodeStatus</highlight></codeline>
<codeline lineno="923"><highlight class="normal">)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>to<sp/>Node<sp/>Register<sp/>offset<sp/>value*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>CAN_NODE_TypeDef*<sp/>CAN_NodexRegs<sp/>=<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1a0cf8964fb7868c66bac2df22f4a43b17" kindref="member">CanNodeRegs</ref>;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>CAN_NodexRegs-&gt;NSR<sp/>&amp;=<sp/>~((uint32_t)NewNodeStatus<sp/>&amp;<sp/>\</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN001_CLEAR_NODE_STATUS_MASK);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>These<sp/>function<sp/>is<sp/>used<sp/>to<sp/>clear<sp/>message<sp/>pending<sp/>register<sp/>bit</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>specific<sp/>message<sp/>object.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="_c_a_n001_8c_1a6daaddccea102728a1428ee9e2c59b68" refkind="member"><highlight class="normal">status_t<sp/><ref refid="_c_a_n001_8h_1a6daaddccea102728a1428ee9e2c59b68" kindref="member">CAN001_ClearMOPndRegisterBit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_a_n001___handle_type" kindref="compound">CAN001_HandleType</ref>*<sp/>Handle,<sp/>uint8_t<sp/>MsgObjnr)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>status_t<sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7af4d5d5d683acd5ba9ce8edcf2ff80147" kindref="member">CAN001_ERROR</ref>;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>MsgPndRegOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((MsgObjnr<sp/>==<sp/>0U)||(MsgObjnr<sp/>&gt;<sp/>Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1af14d78cef1a0e5b8eca3c32efbd22862" kindref="member">NodeMONo</ref>))</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)<ref refid="_c_a_n001_8h_1a911022e2cacd2412c2f36c9c89453ab7a34bfc2c1afefdabb22d1b86917f22944" kindref="member">CAN001_MO_NOT_FOUND</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___debug_log__apidoc_1ga9deb302be0d1e44cf2a50dd0b689877a" kindref="member">ERROR</ref>(DBG002_GID_CAN001,Status,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>MsgPndRegOffset<sp/>=<sp/><ref refid="_c_a_n___types_8h_1a6500abb80c2aae80ff47839a9e371bb7" kindref="member">GET_MSGPND_OFFSET</ref>(Handle-&gt;<ref refid="struct_c_a_n001___handle_type_1ac4e6a73aa11347a618d4c513163f23b4" kindref="member">NodeID</ref>);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>CLR_BIT((*MsgPndRegOffset),<sp/>(MsgObjnr-1U));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>(uint32_t)DAVEApp_SUCCESS;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="comment">/*CODE_BLOCK_END*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/src/CAN001/CAN001.c"/>
  </compounddef>
</doxygen>
