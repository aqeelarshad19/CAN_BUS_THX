<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_c_c_u8_p_w_m_l_i_b_8h" kind="file">
    <compoundname>CCU8PWMLIB.h</compoundname>
    <includes refid="_d_a_v_e3_8h" local="no">DAVE3.h</includes>
    <includedby refid="_l_i_b_s_8h" local="yes">LIBS.h</includedby>
    <includedby refid="_c_c_u8_p_w_m_l_i_b_8c" local="yes">CCU8PWMLIB.c</includedby>
    <incdepgraph>
      <node id="307">
        <label>CAN_Types.h</label>
        <link refid="_c_a_n___types_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="292">
        <label>CCU8PWMLIB.h</label>
        <link refid="CCU8PWMLIB.h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="294">
        <label>XMC4500.h</label>
      </node>
      <node id="314">
        <label>UART001_Conf.h</label>
        <link refid="_u_a_r_t001___conf_8h"/>
      </node>
      <node id="296">
        <label>stdint.h</label>
      </node>
      <node id="311">
        <label>../../inc/NVIC002/NVIC002.h</label>
        <link refid="_n_v_i_c002_8h"/>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>../../inc/IO004/IO004.h</label>
        <link refid="_i_o004_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>stddef.h</label>
      </node>
      <node id="313">
        <label>Usic.h</label>
        <link refid="_usic_8h"/>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="295">
        <label>../../inc/LIBS/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>../../inc/CLK001/CLK001.h</label>
        <link refid="_c_l_k001_8h"/>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>../../inc/DAVESupport/MULTIPLEXER.h</label>
        <link refid="_m_u_l_t_i_p_l_e_x_e_r_8h"/>
      </node>
      <node id="305">
        <label>../../inc/CANGLOBAL/CANGLOBAL.h</label>
        <link refid="_c_a_n_g_l_o_b_a_l_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="301">
        <label>../../inc/DBG001/DBG001.h</label>
        <link refid="_d_b_g001_8h_source"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>CAN001_Conf.h</label>
        <link refid="_c_a_n001___conf_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>uc_id.h</label>
      </node>
      <node id="306">
        <label>../../inc/CAN001/CAN001.h</label>
        <link refid="_c_a_n001_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>IO004_Conf.h</label>
        <link refid="_i_o004___conf_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="293">
        <label>DAVE3.h</label>
        <link refid="_d_a_v_e3_8h"/>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
      </node>
      <node id="312">
        <label>../../inc/UART001/UART001.h</label>
        <link refid="_u_a_r_t001_8h"/>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>UART001_Extern.h</label>
        <link refid="_u_a_r_t001___extern_8h"/>
      </node>
      <node id="302">
        <label>../../inc/RESET001/RESET001.h</label>
        <link refid="_r_e_s_e_t001_8h"/>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
      </node>
      <node id="300">
        <label>MOTORLIB.h</label>
        <link refid="_m_o_t_o_r_l_i_b_8h"/>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>../../inc/LIBS/LIBS.h</label>
        <link refid="_l_i_b_s_8h"/>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="320">
        <label>CAN_Types.h</label>
        <link refid="_c_a_n___types_8h"/>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
      <node id="316">
        <label>CCU8PWMLIB.h</label>
        <link refid="CCU8PWMLIB.h"/>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="335" relation="include">
        </childnode>
      </node>
      <node id="335">
        <label>CCU8PWMLIB.c</label>
        <link refid="_c_c_u8_p_w_m_l_i_b_8c"/>
      </node>
      <node id="326">
        <label>IO004.h</label>
        <link refid="_i_o004_8h"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="324">
        <label>MOTORLIB.c</label>
        <link refid="_m_o_t_o_r_l_i_b_8c"/>
      </node>
      <node id="332">
        <label>MULTIPLEXER.c</label>
        <link refid="_m_u_l_t_i_p_l_e_x_e_r_8c"/>
      </node>
      <node id="336">
        <label>Main.c</label>
        <link refid="_main_8c_source"/>
      </node>
      <node id="328">
        <label>CAN001.c</label>
        <link refid="_c_a_n001_8c"/>
      </node>
      <node id="322">
        <label>CANGLOBAL.h</label>
        <link refid="_c_a_n_g_l_o_b_a_l_8h"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="334">
        <label>IO004_Conf.c</label>
        <link refid="_i_o004___conf_8c"/>
      </node>
      <node id="331">
        <label>DAVE3.c</label>
        <link refid="_d_a_v_e3_8c"/>
      </node>
      <node id="325">
        <label>DBG001.h</label>
        <link refid="_d_b_g001_8h_source"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="333">
        <label>IO004.c</label>
        <link refid="_i_o004_8c"/>
      </node>
      <node id="321">
        <label>CAN001_Conf.h</label>
        <link refid="_c_a_n001___conf_8h"/>
        <childnode refid="319" relation="include">
        </childnode>
      </node>
      <node id="319">
        <label>CAN001.h</label>
        <link refid="_c_a_n001_8h"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="330">
        <label>CANGLOBAL.c</label>
        <link refid="_c_a_n_g_l_o_b_a_l_8c"/>
      </node>
      <node id="327">
        <label>IO004_Conf.h</label>
        <link refid="_i_o004___conf_8h"/>
        <childnode refid="326" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>DAVE3.h</label>
        <link refid="_d_a_v_e3_8h"/>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="325" relation="include">
        </childnode>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="335" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="329">
        <label>CAN001_Conf.c</label>
        <link refid="_c_a_n001___conf_8c"/>
      </node>
      <node id="323">
        <label>MOTORLIB.h</label>
        <link refid="_m_o_t_o_r_l_i_b_8h"/>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="317">
        <label>LIBS.h</label>
        <link refid="_l_i_b_s_8h"/>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type" prot="public">CCU8PWMLIB_DynamicHandleType</innerclass>
    <innerclass refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" prot="public">CCU8PWMLIB_HandleType</innerclass>
    <innerclass refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" prot="public">CCU8PWMLIB_TimerRegsType</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1aa832a5193910ba28f884cd6cbb483ff6" prot="public" static="no">
        <name>CCU8PWMLIB_EVENT_0</name>
        <initializer>0x01U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is mask for Event 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="74" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a86aea04aa10c6d7f8885b2eedb63a4e2" prot="public" static="no">
        <name>CCU8PWMLIB_EVENT_1</name>
        <initializer>0x02U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is mask for Event 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="78" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a80a5a9809915a2af5cff6e17fd26a79c" prot="public" static="no">
        <name>CCU8PWMLIB_EVENT_2</name>
        <initializer>0x03U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is mask for event 2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="82" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1af197ab0a11397c7e8189002415b9311e" prot="public" static="no">
        <name>CCU8PWMLIB_ACTIVE_LOW</name>
        <initializer>0x00U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Active low level </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="86" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a8f058e5facdd7043a1519ea0ac943f44" prot="public" static="no">
        <name>CCU8PWMLIB_ACTIVE_HIGH</name>
        <initializer>0x01U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Active high level </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="90" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ac1e8492bfc39862e38a230c0a9295adb" prot="public" static="no">
        <name>CCU8PWMLIB_ALL_CCU8_INTR_CLEAR</name>
        <initializer>0x00000F3FU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To clear all the interrupts of CCU </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="94" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ac429d87f4e70bbaed5e0e2ea823bf3a8" prot="public" static="no">
        <name>CCU8PWMLIB_SLICE_CLEAR</name>
        <initializer>0x07U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To clear the CCU8 slice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="98" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a333bd06341bf3c2a947329e6f5d57f9d" prot="public" static="no">
        <name>CCU8PWMLIB_LPF</name>
        <initializer>0x0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>low pass filter value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="102" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ab950cfe533e8aba718ebc77ebd4a551a" prot="public" static="no">
        <name>CCU8PWMLIB_COUNT</name>
        <param><defname>PwmTime</defname></param>
        <param><defname>Res</defname></param>
        <initializer>(uint32_t)(PwmTime/Res)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To count the period register value from the PWM frequency and the CCU8 clock. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="107" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ad4ccfeb8a8ae63cdf89373caaecfbb35" prot="public" static="no">
        <name>CCU8PWMLIB_EDGE_PERIOD_VAL</name>
        <param><defname>count</defname></param>
        <initializer>(uint32_t)(count -1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the period register value in edge-aligned mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="111" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a7af45f89ee5e754121cf084c1060ac0f" prot="public" static="no">
        <name>CCU8PWMLIB_CENTER_PERIOD_VAL</name>
        <param><defname>count</defname></param>
        <initializer>(uint32_t)((count &lt;&lt;1U) -1U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the period register value in center-aligned mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="115" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ac3c93880df8a33f7c15b60a83ca838df" prot="public" static="no">
        <name>CCU8PWMLIB_COMPARE_MODE</name>
        <initializer>0x00U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the value to set compare mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="118" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ae1f2c7bd2f1b32f830bf29d28f468700" prot="public" static="no">
        <name>CCU8PWMLIB_EVENT2_INTERRUPT</name>
        <initializer>0xAU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="120" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a4fbdd2c32e8d61bad9dd2960eda5959f" prot="public" static="no">
        <name>CCU8PWMLIB_TRAP_FLAG_CLEAR</name>
        <initializer>0xBU</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="122" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1ade3715e9405e636bda999ce4cff3b799" prot="public" static="no">
        <name>CCU8PWMLIB_MAX_VALUE</name>
        <initializer>65535UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="124" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_c_u8_p_w_m_l_i_b_8h_1a526a5fe05b646a92c94366bea9f2ead0" prot="public" static="no">
        <name>CCU8PWMLIB_TC_MAX_VALUE</name>
        <initializer>0xFFFFFFFFUL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="126" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7" prot="public" static="no">
        <name>CCU8PWMLIB_StateType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7ac9729df004c2b3b51f1484fd54092e9c" prot="public">
          <name>CCU8PWMLIB_UNINITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the default state after power on reset </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a8f7c27e1d6195becb54880188bdc99ad" prot="public">
          <name>CCU8PWMLIB_INITIALIZED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the INITIALIZED state in which APP is initialized as per selected parameters </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a7abf3a2f6e85223e044cfaa2691f3c54" prot="public">
          <name>CCU8PWMLIB_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This state indicates that CCU8_CCy slice is running in PWM mode. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7af9c5bb69427f0dd5799394663b8cb59c" prot="public">
          <name>CCU8PWMLIB_STOPPED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This state indicates that CCU4_CCy slice timer is stopped. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure enumerates the states of the Single Phase PWM with dead time APP. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="140" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="139" bodyend="159"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" prot="public" static="no">
        <name>CCU8PWMLIB_CCUInUseType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a69eead65753015918a98d893fb06c5da" prot="public">
          <name>CCU8PWMLIB_SLICE0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is slice 0 of CCU8 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389aa08bb1877fb3ab8441085a444111e0c6" prot="public">
          <name>CCU8PWMLIB_SLICE1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is slice 1 of CCU8 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389ab3cf71f890d9dd3b1298ecf97eb37bac" prot="public">
          <name>CCU8PWMLIB_SLICE2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is slice 2 of CCU8 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a94ccf4a81eb45ca84470fbc0723daba9" prot="public">
          <name>CCU8PWMLIB_SLICE3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is slice 3 of CCU8 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the CCU8x_CCy slice used by Single Phase PWM with Dead time APP. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="166" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="165" bodyend="183"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5d" prot="public" static="no">
        <name>CCU8PWMLIB_ErrorCodesType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da789710d8d62844cb5cbbbcb58397fe99" prot="public">
          <name>CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This error code would be returned if the current API operation is not possible because the App is in certain state. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5dafad7aa0ec6e3125609289fc8812ddff7" prot="public">
          <name>CCU8PWMLIB_INVALID_PARAM_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This error code means that the parameter passed to an API are invalid </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da5f8a5bd318182243589ac1a0c8e5c0c0" prot="public">
          <name>CCU8PWMLIB_IN_TRAP_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This error code means that the trap condition is set. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da8cadfc2862f37f0323753718a2834090" prot="public">
          <name>CCU8PWMLIB_FUNCTION_ENTRY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DebugLog Message Id for Function Entry </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5daef392324213f6c5b2bbc406a7ece0cee" prot="public">
          <name>CCU8PWMLIB_FUNCTION_EXIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DebugLog Message Id for Function Exit </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the error codes of this APP which will be returned from a function as a return parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="190" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="189" bodyend="214"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5c" prot="public" static="no">
        <name>CCU8PWMLIB_DeadTimeConfType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca0cf5a61ed2b7ef225e679988890e0a9c" prot="public">
          <name>CCU8PWMLIB_DISABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable dead time generation </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca5de9c48e035bf17a583ac21a83e6c72f" prot="public">
          <name>CCU8PWMLIB_ENABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable dead time generation </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5cac37faa03d3138838fed04cfd95ff4bc1" prot="public">
          <name>CCU8PWMLIB_ENABLEDIRECTOUTPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable dead time generation for direct output </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5caecd357ce898d951f7ed7761df35818aa" prot="public">
          <name>CCU8PWMLIB_ENABLEINVERTEDOUTPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable dead time generation for inverted output. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates dead time configuration for the CCU8_CCy slice channels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="220" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="219" bodyend="237"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6db" prot="public" static="no">
        <name>CCU8PWMLIB_CompareModeType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dbaf35a2eac8874e4547f12b41109fd49e7" prot="public">
          <name>CCU8PWMLIB_SYMMETRIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In this mode channel 1 uses compare register 1 for rising and falling compare match and channel 2 uses compare register 2 for rising and falling compare match. Waveform is symmetric over a PWM period. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dba8ae5944b228de0648e44f981efa2b505" prot="public">
          <name>CCU8PWMLIB_ASYMMETRIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In this mode channel 1 uses compare register 1 for rising compare match and channel 2 uses compare register 2 for falling compare match. Waveform is not symmetric over a period. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the compare mode of the CCU8_CCy slice timer - symmetric comparison or asymmetric comparison </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="244" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="243" bodyend="257"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" prot="public" static="no">
        <name>CCU8PWMLIB_EdgeTriggerType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda309b0bb0a80a11fdc5ace7c8de544add" prot="public">
          <name>CCU8PWMLIB_NOTRIGGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger is not required. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fdaf6bc78116279321ca22684740ccbf967" prot="public">
          <name>CCU8PWMLIB_RISINGEDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger on rising edge </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda4bae34fa5a2374e8a2a5014e59ed0155" prot="public">
          <name>CCU8PWMLIB_FALLINGEDGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger on falling edge </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda475a928843518591887b75ff756ceb07" prot="public">
          <name>CCU8PWMLIB_BOTHEDGES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger on both edges </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="259" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="259" bodyend="276"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485e" prot="public" static="no">
        <name>CCU8PWMLIB_CountingModeType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485ea2d5a28617205e9b31f07a66e96afeb2b" prot="public">
          <name>CCU8PWMLIB_EDGE_ALIGNED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In this mode with up counting direction, timer counts up to the period value and then clears to zero to start counting again. And in down counting, timer decrements from period value to zero and starts again with period value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485eabbd678b284d99d4ab8fc25dfb6fa52e6" prot="public">
          <name>CCU8PWMLIB_CENTER_ALIGNED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>In this mode timer counts up till the period value and then counts down to zero.With down counting selected first, timer will decrement from period value to zero and then will increment again to period value to complete one cycle. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the CCU8_CCy slice timer operating mode - edge-aligned or center-aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="283" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="282" bodyend="298"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679" prot="public" static="no">
        <name>CCU8PWMLIB_ExtStartConfigType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679a8cf660fb27736c21f84e0d510c4e04e5" prot="public">
          <name>CCU8PWMLIB_START_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This will set the run bit of the timer. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679aa5f43e458a09db3b03d20e288c4b9c3f" prot="public">
          <name>CCU8PWMLIB_CLEAR_START_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This will first clear the timer and then set the run bit of the timer. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the external start configuration of the timer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="304" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="303" bodyend="313"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05e" prot="public" static="no">
        <name>CCU8PWMLIB_ExtStopConfigType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eaeffc788b17295a33c777d50f786e083b" prot="public">
          <name>CCU8PWMLIB_STOP_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This will reset the RUN bit of the timer </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05ea96a1f34002796e803201ceda4234b4e3" prot="public">
          <name>CCU8PWMLIB_CLEAR_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This will clear the timer register value but keeps the timer running. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eada845ab4161c77c1451664b2369ba331" prot="public">
          <name>CCU8PWMLIB_CLEAR_STOP_TIMER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This will clear the timer register value and also clears the RUN bit of the timer. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the external stop configuration of the timer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="319" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="318" bodyend="333"/>
      </memberdef>
      <memberdef kind="enum" id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" prot="public" static="no">
        <name>CCU8PWMLIB_EventNameType</name>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ad75a245d33cdf0165a1c73f63fea65cc" prot="public">
          <name>CCU8PWMLIB_PERIODMATCHEVENT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the period match interrupt </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ac5bc3d2e1252490fabb6805f060adb80" prot="public">
          <name>CCU8PWMLIB_COMPAREMATCHEVENT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the compare match while counting UP interrupt </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82a53aced695c137c419bc820b4da9f7ed7" prot="public">
          <name>CCU8PWMLIB_EXTSTARTEVENT</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the external start interrupt i.e. Event 0 interrupt </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ab8c2d78e2eb0fbb94ed45cd5dec807ce" prot="public">
          <name>CCU8PWMLIB_EXTSTOPEVENT</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the external stop interrupt i.e. Event 1 interrupt </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82abf92838008408a34e6f74688445e7ab4" prot="public">
          <name>CCU8PWMLIB_TRAPEVENT</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This is the trap interrupt i.e. Event 2 interrupt </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumerates the events of the CCU8PWMLIB app. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="339" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="338" bodyend="360"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_c_u8_p_w_m_l_i_b_8h_1a4b12e65c08fa37e7c21fefe90afde9f7" prot="public" static="no">
        <type>status_t(*</type>
        <definition>typedef status_t(* CCU8PWMLIB_SetCompareFuncionPtr)(const void *, uint32_t, uint32_t)</definition>
        <argsstring>)(const void *, uint32_t, uint32_t)</argsstring>
        <name>CCU8PWMLIB_SetCompareFuncionPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="128" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_c_u8_p_w_m_l_i_b_8h_1a96a007f381242c883da081483745039c" prot="public" static="no">
        <type>status_t(*</type>
        <definition>typedef status_t(* CCU8PWMLIB_SetDutyFunctionPtr)(const void *, float, uint32_t, uint8_t)</definition>
        <argsstring>)(const void *, float, uint32_t, uint8_t)</argsstring>
        <name>CCU8PWMLIB_SetDutyFunctionPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="129" bodyfile="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1acde56587fac2fe46810aa92dabc447ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_Init</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_Init</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This function is used to initialize the APP. It will configure CCU8_CCy slice registers with the selected PWM parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void<linebreak/>
 <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="621"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a4ecddd6ee4aeb36a7fce45c7ef5c5d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_Deinit</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_Deinit</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This will reset the CCU8_CCy slice registers to default state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 else CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="634"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a94777307d29d38ae1913a6e61b682227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_EnableExtStart</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_EnableExtStart</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This function enables the external start feature. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 else CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="647"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a93050a5f772bedbfc06ac1dc35383228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_DisableExtStart</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_DisableExtStart</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This function disables the external start feature. This is useful for multiphase PWM app to disable this functionality to avoid spurious start of the slices due to other instances of the app. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 else CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="662"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a7891bf50a3d5c1a1b507804768e37ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_Start</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_Start</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This will start the Single Phase PWM with Dead Time APP which will in turn start the CCU8_CCy slice.<linebreak/>
 <bold>This function needs to be called to start the App even if External Start feature of CCU8 is configured. </bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called in the state other than CCU8PWMLIB_INITIALIZED <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="678"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1abc09469f26152a097aa1fa6b6002d419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_Stop</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_Stop</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This will stop the Single Phase PWM with Dead Time APP which will in turn stop the CCU8_CCy slice.<linebreak/>
 <bold> This function needs to be called even if external stop feature is configured </bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when not in the state CCU8PWMLIB_RUNNING or <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="694"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1aa24a72f3b51b907657ee4bb47f827ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetCompare</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t Compare1, uint32_t Compare2)</argsstring>
        <name>CCU8PWMLIB_SetCompare</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare2</declname>
        </param>
        <briefdescription>
<para>This function will modify the duty cycle of the output waveform which will change the pulse width.<linebreak/>
 <bold>Duty cycle is given in terms of the compare register value and not in terms of the percentage.</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare1</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register 1 value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare2</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register 2 value. <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="718"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a49cce33433a65e7cef915cf8d817d0cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyCycle</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyCycle</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will modify the duty cycle of the output waveform which will change the pulse width.<linebreak/>
 <bold>Duty cycle is given in terms of percentage.</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to duty cycle in percentage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift Sign = 0: Compare value is incremented by shift. This is not allowed in edge-aligned. Sign = 1: Compare value is decremented by shift. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="744"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a76164cadc4975d4459c71c920a607b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetPeriod</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t PwmFreq)</argsstring>
        <name>CCU8PWMLIB_SetPeriod</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>PwmFreq</declname>
        </param>
        <briefdescription>
<para>This function will modify the pwm frequency of the output waveform which will change the pulse width.<linebreak/>
 <bold>In case of timer concatenation,given value is split into two 16-bit values and they are programmed in Second and First slice.<linebreak/>
 e.g. 0x80000010 value is written as 0x8000 as Period register of Second slice and 0x0010 as period register of first slice. Total PWM period is ((0x8000 +1) * 0x0010) + 1. </bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PwmFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to period register&apos;s value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_RUNNING <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="769"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a5032e02603e9964e25c608f019446aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetPeriodAndCompare</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t PwmFreq, uint32_t Compare1, uint32_t Compare2)</argsstring>
        <name>CCU8PWMLIB_SetPeriodAndCompare</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>PwmFreq</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare2</declname>
        </param>
        <briefdescription>
<para>This function will modify the pwm frequency and duty cycle of the output waveform which will change the pulse width.<linebreak/>
 Frequency is given as period register value and duty cycle is given as compare register value. <bold>In case of timer concatenation,given value is split into two 16-bit values and they are programmed in Second and First slice.<linebreak/>
 e.g. 0x80000010 value is written as 0x8000 as Period register of Second slice and 0x0010 as period register of first slice. Total PWM period is ((0x8000 +1) * 0x0010) + 1. </bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PwmFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to period register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare1</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register 1 value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare2</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register 2 value. <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="798"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a07a310f7ad4b083c26ed3f3500ec4e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetPwmFreq</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, float PwmFreq)</argsstring>
        <name>CCU8PWMLIB_SetPwmFreq</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>PwmFreq</declname>
        </param>
        <briefdescription>
<para>This function will modify the pwm frequency of the output waveform <linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PwmFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to frequency in hertz </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_RUNNING <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="817"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1af6f9534fc93a4c925fa3967393434e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetPwmFreqAndDutyCycle</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, float PwmFreq, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetPwmFreqAndDutyCycle</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>PwmFreq</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will modify the pwm frequency and duty cycle of the output waveform <linebreak/>
. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PwmFreq</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to frequency in hertz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to duty cycle in percentage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift Sign = 0: Compare value is incremented by shift. This is not allowed in edge-aligned. Sign = 1: Compare value is decremented by shift. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="842"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a446c4bca87183e93d042add320e074e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetTimerVal</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t TimerVal)</argsstring>
        <name>CCU8PWMLIB_SetTimerVal</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>TimerVal</declname>
        </param>
        <briefdescription>
<para>This will update the timer register value when timer is stopped. This is used to set the starting value of the timer. It is useful API in the single shot mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TimerVal</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="862"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a8181e2413754fe2eb1bed2ccbe3019f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SWRequestShadowTransfer</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_SWRequestShadowTransfer</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This will request the update of the period register, compare register values from the respective shadow transfers. This function needs to be called when shadow compare and period registers are updated explicitly by top level app.<linebreak/>
 <bold>NOTE: </bold> SetDutyCycle and SetPwmFreq functions handle shadow transfer request. No need to call this function after changing the duty cycle and PWM frequency. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="885"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a2ddaedd420e8f58e11bae159c68e0309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_GetPeriodReg</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t *PeriodRegPtr)</argsstring>
        <name>CCU8PWMLIB_GetPeriodReg</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>PeriodRegPtr</declname>
        </param>
        <briefdescription>
<para>This function will read the period register value.This will be useful to calculate the compare register values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">PeriodRegPtr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED state <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="904"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1abd35873be71367099ee33ce41eba8620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_ResetTrapFlag</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr)</argsstring>
        <name>CCU8PWMLIB_ResetTrapFlag</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <briefdescription>
<para>This function will reset the trap flag by checking whether trap condition is reset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_INITIALIZED or CCU8PWMLIB_RUNNING state <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="918"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a9c439e95123dac92a7e10965c82f7ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_GetTimerRegsVal</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, CCU8PWMLIB_TimerRegsType *TimerRegsPtr)</argsstring>
        <name>CCU8PWMLIB_GetTimerRegsVal</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" kindref="compound">CCU8PWMLIB_TimerRegsType</ref> *</type>
          <declname>TimerRegsPtr</declname>
        </param>
        <briefdescription>
<para>This function will read the timer values of compare register and period register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">TimerRegsPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" kindref="compound">CCU8PWMLIB_TimerRegsType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED <linebreak/>
 CCU8PWMLIB_INVALID_PARAM_ERROR: If TimerRegs* is invalid. <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="938"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a6600635ff8ad1c97b02b9933dfd1bbd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_GetTimerStatus</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, uint32_t *TimerStatusPtr)</argsstring>
        <name>CCU8PWMLIB_GetTimerStatus</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>TimerStatusPtr</declname>
        </param>
        <briefdescription>
<para>This function will read the timer status whether timer is running or idle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">TimerStatusPtr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If this function is called when in the state CCU8PWMLIB_UNINITIALIZED . <linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="957"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1ace57d26797e3d90dbbea114c004860d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_EnableEvent</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, const CCU8PWMLIB_EventNameType Event)</argsstring>
        <name>CCU8PWMLIB_EnableEvent</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>const <ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></type>
          <declname>Event</declname>
        </param>
        <briefdescription>
<para>This function will enable the event. This should be called by the user first for interrupt handling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the Instance variable<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be enabled <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if the function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If the function is called in CCU8PWMLIB_UNINITIALIZED State.<linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="977"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a9f0ef0a5f70a5d3b74d0ac0c710bbf95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_DisableEvent</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, const CCU8PWMLIB_EventNameType Event)</argsstring>
        <name>CCU8PWMLIB_DisableEvent</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>const <ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></type>
          <declname>Event</declname>
        </param>
        <briefdescription>
<para>This function will disable the event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the Instance variable<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be disabled <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if the function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If the function is called in CCU8PWMLIB_UNINITIALIZED State.<linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="996"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a60a95fcde10d5743d097495230040ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_ClearPendingEvent</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, const CCU8PWMLIB_EventNameType Event)</argsstring>
        <name>CCU8PWMLIB_ClearPendingEvent</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>const <ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></type>
          <declname>Event</declname>
        </param>
        <briefdescription>
<para>This function will clear the pending event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the Instance variable<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if the function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If the function is called in CCU8PWMLIB_UNINITIALIZED State.<linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1015"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a014df50cba8f3c04d2319213d5e7ce0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetPendingEvent</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, const CCU8PWMLIB_EventNameType Event)</argsstring>
        <name>CCU8PWMLIB_SetPendingEvent</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>const <ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></type>
          <declname>Event</declname>
        </param>
        <briefdescription>
<para>This function will forcefully set the event.This function should not be called within interrut handler to avoid infinite loop. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the Instance variable<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be set <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if the function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If the function is called in CCU8PWMLIB_UNINITIALIZED State.<linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1035"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a47c6dc85ff480bbc8b40ca513418d1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_GetPendingEvent</definition>
        <argsstring>(const CCU8PWMLIB_HandleType *HandlePtr, const CCU8PWMLIB_EventNameType Event, uint8_t *EvtStatus)</argsstring>
        <name>CCU8PWMLIB_GetPendingEvent</name>
        <param>
          <type>const <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>const <ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></type>
          <declname>Event</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>EvtStatus</declname>
        </param>
        <briefdescription>
<para>This function will check whether given event is set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the Instance variable<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be set <linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">EvtStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of the event whether it is set <linebreak/>
 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t<linebreak/>
 DAVEApp_SUCCESS: if the function is successful<linebreak/>
 CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR: If the function is called in CCU8PWMLIB_UNINITIALIZED State.<linebreak/>
</para></simplesect>
<bold>Reentrancy: Yes</bold><linebreak/>
 <bold>Sync/Async: Synchronous</bold><linebreak/>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1056"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a0e47d6ac4c62f98cabcecf76491d6cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyEdgeAlignAsymmetric</definition>
        <argsstring>(const void *HdlPtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyEdgeAlignAsymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned asymmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1073"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a09c5d41924e679eb5877381f2c1caa7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyEdgeAlignSymmetric</definition>
        <argsstring>(const void *HdlPtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyEdgeAlignSymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned symmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1090"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a7f4a08a5e9b12756d4562d8d3809dc60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyEdgeAlignSymmetricTimerConcat</definition>
        <argsstring>(const void *HdlPtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyEdgeAlignSymmetricTimerConcat</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned symmetric with timer concatenation mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1107"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1aa2bb812fa947898e7c818b1ad0ec5e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyCenterAlignSymmetric</definition>
        <argsstring>(const void *HandlePtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyCenterAlignSymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetDutyCycle when center aligned symmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1124"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a6625f24c861287aba1a3708dfb87bc36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetDutyCenterAlignAsymmetric</definition>
        <argsstring>(const void *HandlePtr, float DutyCycle, uint32_t Shift, uint8_t Sign)</argsstring>
        <name>CCU8PWMLIB_SetDutyCenterAlignAsymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HandlePtr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>DutyCycle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Shift</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Sign</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetDutyCycle when center aligned symmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HandlePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>It corresponds to compare register&apos;s value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Shift</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls the duty cycle value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Sign</parametername>
</parameternamelist>
<parameterdescription>
<para>It controls addition and subtraction of shift </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1141"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1aec416744f840649c750354c7c0e53bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetCompareAsymmetric</definition>
        <argsstring>(const void *HdlPtr, uint32_t Compare1, uint32_t Compare2)</argsstring>
        <name>CCU8PWMLIB_SetCompareAsymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare2</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetCompare when asymmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare1</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register1 value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare2</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register 2 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1156"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a0be185dbb95298cbd3e87c8f80346a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetCompareSymmetric</definition>
        <argsstring>(const void *HdlPtr, uint32_t Compare1, uint32_t Compare2)</argsstring>
        <name>CCU8PWMLIB_SetCompareSymmetric</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare2</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetCompare when symmetric mode is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare1</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register1 value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare2</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register 2 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1171"/>
      </memberdef>
      <memberdef kind="function" id="_c_c_u8_p_w_m_l_i_b_8h_1a3c237e97e9048621f6db7e938997abdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>status_t</type>
        <definition>status_t CCU8PWMLIB_SetCompareEdgeAlignSymmetricTimerConcat</definition>
        <argsstring>(const void *HdlPtr, uint32_t Compare1, uint32_t Compare2)</argsstring>
        <name>CCU8PWMLIB_SetCompareEdgeAlignSymmetricTimerConcat</name>
        <param>
          <type>const void *</type>
          <declname>HdlPtr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Compare2</declname>
        </param>
        <briefdescription>
<para>This function will be internally called by CCU8PWMLIB_SetCompare when edge-aligned symmetric mode with timer concatenation is selected. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">HdlPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare1</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register1 value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Compare2</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare register 2 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h" line="1186"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains all public data structures,enums and function prototypes for SinglePhPWM with dead time APP. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2013<sp/>Infineon<sp/>Technologies<sp/>AG.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Infineon<sp/>Technologies<sp/>AG<sp/>(Infineon)<sp/>is<sp/>supplying<sp/>this<sp/>software<sp/>for<sp/>use<sp/>with</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Infineon&apos;s<sp/>microcontrollers.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>can<sp/>be<sp/>freely<sp/>distributed<sp/>within<sp/>development<sp/>tools<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>supporting<sp/>such<sp/>microcontrollers.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;.<sp/><sp/>NO<sp/>WARRANTIES,<sp/>WHETHER<sp/>EXPRESS,<sp/>IMPLIED</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>OR<sp/>STATUTORY,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>APPLY<sp/>TO<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>INFINEON<sp/>SHALL<sp/>NOT,<sp/>IN<sp/>ANY<sp/>CIRCUMSTANCES,<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>SPECIAL,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES,<sp/>FOR<sp/>ANY<sp/>REASON<sp/>WHATSOEVER.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>PLATFORM<sp/>:<sp/>Infineon<sp/>XMC4000/XMC1000<sp/>Series<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>COMPILER<sp/>:<sp/>Compiler<sp/>Independent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="22"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="23"><highlight class="comment">**<sp/>AUTHOR<sp/><sp/><sp/>:<sp/>App<sp/>Developer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="24"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="25"><highlight class="comment">**<sp/>MAY<sp/>BE<sp/>CHANGED<sp/>BY<sp/>USER<sp/>[yes/no]:<sp/>Yes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="26"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="27"><highlight class="comment">**<sp/>MODIFICATION<sp/>DATE<sp/>:<sp/>Dec<sp/>13,<sp/>2013<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="28"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="32"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author(s)<sp/>Identity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="33"><highlight class="comment">********************************************************************************</highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/>Initials<sp/><sp/><sp/><sp/><sp/>Name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="36"><highlight class="comment">**<sp/>---------------------------------------------------------------------------**</highlight></codeline>
<codeline lineno="37"><highlight class="comment">**<sp/>KS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>App<sp/>Developer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">/*<sp/>Revision<sp/>History</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>30<sp/>Nov<sp/>2012<sp/><sp/><sp/>v1.0.4<sp/><sp/><sp/>taken<sp/>as<sp/>base<sp/>version</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>13<sp/>Dec<sp/>2012<sp/><sp/><sp/>v1.0.6<sp/><sp/><sp/>coding<sp/>guidelines</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CCU8PWMLIB_H_</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_H_</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="59"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Include<sp/>Files<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="60"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_d_a_v_e3_8h" kindref="compound" tooltip="This file contains all public data structures,enums and function prototypes.">DAVE3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="69"><highlight class="comment">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global<sp/>Macro<sp/>Definitions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="70"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_1&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="74" refid="_c_c_u8_p_w_m_l_i_b_8h_1aa832a5193910ba28f884cd6cbb483ff6" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_EVENT_0<sp/><sp/>0x01U</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_2&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="78" refid="_c_c_u8_p_w_m_l_i_b_8h_1a86aea04aa10c6d7f8885b2eedb63a4e2" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_EVENT_1<sp/><sp/>0x02U</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_3&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="82" refid="_c_c_u8_p_w_m_l_i_b_8h_1a80a5a9809915a2af5cff6e17fd26a79c" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_EVENT_2<sp/><sp/>0x03U</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_4&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="86" refid="_c_c_u8_p_w_m_l_i_b_8h_1af197ab0a11397c7e8189002415b9311e" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_ACTIVE_LOW<sp/><sp/>0x00U</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_5&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="90" refid="_c_c_u8_p_w_m_l_i_b_8h_1a8f058e5facdd7043a1519ea0ac943f44" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_ACTIVE_HIGH<sp/><sp/>0x01U</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_6&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="94" refid="_c_c_u8_p_w_m_l_i_b_8h_1ac1e8492bfc39862e38a230c0a9295adb" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_ALL_CCU8_INTR_CLEAR<sp/><sp/>0x00000F3FU</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_7&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="98" refid="_c_c_u8_p_w_m_l_i_b_8h_1ac429d87f4e70bbaed5e0e2ea823bf3a8" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_SLICE_CLEAR<sp/><sp/>0x07U</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_8&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="102" refid="_c_c_u8_p_w_m_l_i_b_8h_1a333bd06341bf3c2a947329e6f5d57f9d" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_LPF<sp/><sp/>0x0U</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIBD_MACRO_9&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="107" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab950cfe533e8aba718ebc77ebd4a551a" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_COUNT(PwmTime,<sp/>Res)<sp/><sp/>(uint32_t)(PwmTime/Res)</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_10&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="111" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad4ccfeb8a8ae63cdf89373caaecfbb35" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_EDGE_PERIOD_VAL(count)<sp/><sp/>(uint32_t)(count<sp/>-1U)</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*&lt;&lt;&lt;DD_CCU8PWMLIB_MACRO_11&gt;&gt;&gt;*/</highlight></codeline>
<codeline lineno="115" refid="_c_c_u8_p_w_m_l_i_b_8h_1a7af45f89ee5e754121cf084c1060ac0f" refkind="member"><highlight class="preprocessor">#define<sp/><sp/>CCU8PWMLIB_CENTER_PERIOD_VAL(count)<sp/><sp/>(uint32_t)((count<sp/>&lt;&lt;1U)<sp/>-1U<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="118" refid="_c_c_u8_p_w_m_l_i_b_8h_1ac3c93880df8a33f7c15b60a83ca838df" refkind="member"><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_COMPARE_MODE<sp/>0x00U</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_EVENT2_INTERRUPT<sp/>0xAU</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_TRAP_FLAG_CLEAR<sp/>0xBU</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_MAX_VALUE<sp/>65535UL</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CCU8PWMLIB_TC_MAX_VALUE<sp/>0xFFFFFFFFUL</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>status_t<sp/>(*CCU8PWMLIB_SetCompareFuncionPtr)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>uint32_t,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>status_t<sp/>(*CCU8PWMLIB_SetDutyFunctionPtr)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>float,<sp/>uint32_t,<sp/>uint8_t);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUMERATIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="139" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7" kindref="member">CCU8PWMLIB_StateType</ref></highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7ac9729df004c2b3b51f1484fd54092e9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7ac9729df004c2b3b51f1484fd54092e9c" kindref="member">CCU8PWMLIB_UNINITIALIZED</ref>,</highlight></codeline>
<codeline lineno="149" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a8f7c27e1d6195becb54880188bdc99ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a8f7c27e1d6195becb54880188bdc99ad" kindref="member">CCU8PWMLIB_INITIALIZED</ref>,</highlight></codeline>
<codeline lineno="153" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a7abf3a2f6e85223e044cfaa2691f3c54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7a7abf3a2f6e85223e044cfaa2691f3c54" kindref="member">CCU8PWMLIB_RUNNING</ref>,</highlight></codeline>
<codeline lineno="157" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7af9c5bb69427f0dd5799394663b8cb59c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7af9c5bb69427f0dd5799394663b8cb59c" kindref="member">CCU8PWMLIB_STOPPED</ref>,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7" kindref="member">CCU8PWMLIB_StateType</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" kindref="member">CCU8PWMLIB_CCUInUseType</ref></highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170" refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a69eead65753015918a98d893fb06c5da" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a69eead65753015918a98d893fb06c5da" kindref="member">CCU8PWMLIB_SLICE0</ref>,</highlight></codeline>
<codeline lineno="174" refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389aa08bb1877fb3ab8441085a444111e0c6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389aa08bb1877fb3ab8441085a444111e0c6" kindref="member">CCU8PWMLIB_SLICE1</ref>,</highlight></codeline>
<codeline lineno="178" refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389ab3cf71f890d9dd3b1298ecf97eb37bac" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389ab3cf71f890d9dd3b1298ecf97eb37bac" kindref="member">CCU8PWMLIB_SLICE2</ref>,</highlight></codeline>
<codeline lineno="182" refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a94ccf4a81eb45ca84470fbc0723daba9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389a94ccf4a81eb45ca84470fbc0723daba9" kindref="member">CCU8PWMLIB_SLICE3</ref></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" kindref="member">CCU8PWMLIB_CCUInUseType</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5d" kindref="member">CCU8PWMLIB_ErrorCodesType</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da789710d8d62844cb5cbbbcb58397fe99" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da789710d8d62844cb5cbbbcb58397fe99" kindref="member">CCU8PWMLIB_OPER_NOT_ALLOWED_ERROR</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="199" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5dafad7aa0ec6e3125609289fc8812ddff7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5dafad7aa0ec6e3125609289fc8812ddff7" kindref="member">CCU8PWMLIB_INVALID_PARAM_ERROR</ref>,</highlight></codeline>
<codeline lineno="203" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da5f8a5bd318182243589ac1a0c8e5c0c0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da5f8a5bd318182243589ac1a0c8e5c0c0" kindref="member">CCU8PWMLIB_IN_TRAP_ERROR</ref>,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Debug<sp/>Log<sp/>Codes<sp/>starts<sp/>here*/</highlight></codeline>
<codeline lineno="208" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da8cadfc2862f37f0323753718a2834090" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5da8cadfc2862f37f0323753718a2834090" kindref="member">CCU8PWMLIB_FUNCTION_ENTRY</ref>,</highlight></codeline>
<codeline lineno="212" refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5daef392324213f6c5b2bbc406a7ece0cee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5daef392324213f6c5b2bbc406a7ece0cee" kindref="member">CCU8PWMLIB_FUNCTION_EXIT</ref></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ae8f4c147e7c3f20c9861570a353bae5d" kindref="member">CCU8PWMLIB_ErrorCodesType</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5c" kindref="member">CCU8PWMLIB_DeadTimeConfType</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224" refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca0cf5a61ed2b7ef225e679988890e0a9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca0cf5a61ed2b7ef225e679988890e0a9c" kindref="member">CCU8PWMLIB_DISABLE</ref>,</highlight></codeline>
<codeline lineno="228" refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca5de9c48e035bf17a583ac21a83e6c72f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5ca5de9c48e035bf17a583ac21a83e6c72f" kindref="member">CCU8PWMLIB_ENABLE</ref>,</highlight></codeline>
<codeline lineno="232" refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5cac37faa03d3138838fed04cfd95ff4bc1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5cac37faa03d3138838fed04cfd95ff4bc1" kindref="member">CCU8PWMLIB_ENABLEDIRECTOUTPUT</ref>,</highlight></codeline>
<codeline lineno="236" refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5caecd357ce898d951f7ed7761df35818aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5caecd357ce898d951f7ed7761df35818aa" kindref="member">CCU8PWMLIB_ENABLEINVERTEDOUTPUT</ref></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5c" kindref="member">CCU8PWMLIB_DeadTimeConfType</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6db" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6db" kindref="member">CCU8PWMLIB_CompareModeType</ref></highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dbaf35a2eac8874e4547f12b41109fd49e7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dbaf35a2eac8874e4547f12b41109fd49e7" kindref="member">CCU8PWMLIB_SYMMETRIC</ref>,</highlight></codeline>
<codeline lineno="256" refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dba8ae5944b228de0648e44f981efa2b505" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6dba8ae5944b228de0648e44f981efa2b505" kindref="member">CCU8PWMLIB_ASYMMETRIC</ref></highlight></codeline>
<codeline lineno="257"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6db" kindref="member">CCU8PWMLIB_CompareModeType</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" kindref="member">CCU8PWMLIB_EdgeTriggerType</ref>{</highlight></codeline>
<codeline lineno="263" refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda309b0bb0a80a11fdc5ace7c8de544add" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda309b0bb0a80a11fdc5ace7c8de544add" kindref="member">CCU8PWMLIB_NOTRIGGER</ref>,</highlight></codeline>
<codeline lineno="267" refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fdaf6bc78116279321ca22684740ccbf967" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fdaf6bc78116279321ca22684740ccbf967" kindref="member">CCU8PWMLIB_RISINGEDGE</ref>,</highlight></codeline>
<codeline lineno="271" refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda4bae34fa5a2374e8a2a5014e59ed0155" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda4bae34fa5a2374e8a2a5014e59ed0155" kindref="member">CCU8PWMLIB_FALLINGEDGE</ref>,</highlight></codeline>
<codeline lineno="275" refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda475a928843518591887b75ff756ceb07" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fda475a928843518591887b75ff756ceb07" kindref="member">CCU8PWMLIB_BOTHEDGES</ref></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" kindref="member">CCU8PWMLIB_EdgeTriggerType</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485e" kindref="member">CCU8PWMLIB_CountingModeType</ref></highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290" refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485ea2d5a28617205e9b31f07a66e96afeb2b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485ea2d5a28617205e9b31f07a66e96afeb2b" kindref="member">CCU8PWMLIB_EDGE_ALIGNED</ref>,</highlight></codeline>
<codeline lineno="297" refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485eabbd678b284d99d4ab8fc25dfb6fa52e6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485eabbd678b284d99d4ab8fc25dfb6fa52e6" kindref="member">CCU8PWMLIB_CENTER_ALIGNED</ref></highlight></codeline>
<codeline lineno="298"><highlight class="normal">}<ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485e" kindref="member">CCU8PWMLIB_CountingModeType</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679" kindref="member">CCU8PWMLIB_ExtStartConfigType</ref></highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308" refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679a8cf660fb27736c21f84e0d510c4e04e5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679a8cf660fb27736c21f84e0d510c4e04e5" kindref="member">CCU8PWMLIB_START_TIMER</ref>,</highlight></codeline>
<codeline lineno="312" refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679aa5f43e458a09db3b03d20e288c4b9c3f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679aa5f43e458a09db3b03d20e288c4b9c3f" kindref="member">CCU8PWMLIB_CLEAR_START_TIMER</ref></highlight></codeline>
<codeline lineno="313"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679" kindref="member">CCU8PWMLIB_ExtStartConfigType</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05e" kindref="member">CCU8PWMLIB_ExtStopConfigType</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323" refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eaeffc788b17295a33c777d50f786e083b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eaeffc788b17295a33c777d50f786e083b" kindref="member">CCU8PWMLIB_STOP_TIMER</ref>,</highlight></codeline>
<codeline lineno="327" refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05ea96a1f34002796e803201ceda4234b4e3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05ea96a1f34002796e803201ceda4234b4e3" kindref="member">CCU8PWMLIB_CLEAR_TIMER</ref>,</highlight></codeline>
<codeline lineno="332" refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eada845ab4161c77c1451664b2369ba331" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05eada845ab4161c77c1451664b2369ba331" kindref="member">CCU8PWMLIB_CLEAR_STOP_TIMER</ref></highlight></codeline>
<codeline lineno="333"><highlight class="normal">}<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05e" kindref="member">CCU8PWMLIB_ExtStopConfigType</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref></highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ad75a245d33cdf0165a1c73f63fea65cc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ad75a245d33cdf0165a1c73f63fea65cc" kindref="member">CCU8PWMLIB_PERIODMATCHEVENT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="347" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ac5bc3d2e1252490fabb6805f060adb80" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ac5bc3d2e1252490fabb6805f060adb80" kindref="member">CCU8PWMLIB_COMPAREMATCHEVENT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="351" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82a53aced695c137c419bc820b4da9f7ed7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82a53aced695c137c419bc820b4da9f7ed7" kindref="member">CCU8PWMLIB_EXTSTARTEVENT</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="355" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ab8c2d78e2eb0fbb94ed45cd5dec807ce" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82ab8c2d78e2eb0fbb94ed45cd5dec807ce" kindref="member">CCU8PWMLIB_EXTSTOPEVENT</ref><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="359" refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82abf92838008408a34e6f74688445e7ab4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82abf92838008408a34e6f74688445e7ab4" kindref="member">CCU8PWMLIB_TRAPEVENT</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}<ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRUCTURES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>******************************************************************************/</highlight></codeline>
<codeline lineno="367" refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" kindref="compound">CCU8PWMLIB_TimerRegsType</ref></highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372" refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1afa0dba63433a1a95ef2468ef98df3a92" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1afa0dba63433a1a95ef2468ef98df3a92" kindref="member">CompReg1</ref>;</highlight></codeline>
<codeline lineno="376" refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a405f992894ebde948e1102947a068d03" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a405f992894ebde948e1102947a068d03" kindref="member">CompReg2</ref>;</highlight></codeline>
<codeline lineno="380" refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a09031a6a419f5a05d09b25abd0a21d9c" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a09031a6a419f5a05d09b25abd0a21d9c" kindref="member">PeriodReg</ref>;</highlight></codeline>
<codeline lineno="384" refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a484af2b76146183c5beab30a2629e95b" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type_1a484af2b76146183c5beab30a2629e95b" kindref="member">TimerReg</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" kindref="compound">CCU8PWMLIB_TimerRegsType</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type" kindref="compound">CCU8PWMLIB_DynamicHandleType</ref></highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type_1a2999cea16769dd48117df61912a1f9e7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab5c8e8ebbb1163a3b9f33b4bfa7045f7" kindref="member">CCU8PWMLIB_StateType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type_1a2999cea16769dd48117df61912a1f9e7" kindref="member">State</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type" kindref="compound">CCU8PWMLIB_DynamicHandleType</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref></highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a51eca5dd957531e9be2101f1cd0e6ad6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a51eca5dd957531e9be2101f1cd0e6ad6" kindref="member">kExtStartTrig</ref>;</highlight></codeline>
<codeline lineno="418" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1abe3d4f46d66af2ded5e05287c5fe12a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1abe3d4f46d66af2ded5e05287c5fe12a5" kindref="member">kExtStopTrig</ref>;</highlight></codeline>
<codeline lineno="423" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1afff3ae5bc87f51e78bc6827d757c3e37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1afff3ae5bc87f51e78bc6827d757c3e37" kindref="member">kPassiveState0</ref>;</highlight></codeline>
<codeline lineno="428" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a51a863d9b66ff92bdb448afbb57daf09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a51a863d9b66ff92bdb448afbb57daf09" kindref="member">kPassiveState1</ref>;</highlight></codeline>
<codeline lineno="433" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a42dfc88a7cf88045c2b27d9846148ff7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a42dfc88a7cf88045c2b27d9846148ff7" kindref="member">kPassiveLevel0</ref>;</highlight></codeline>
<codeline lineno="438" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a45f6f4a8d5f4825cb7c4b5d39d8e23c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a45f6f4a8d5f4825cb7c4b5d39d8e23c2" kindref="member">kPassiveLevel1</ref>;</highlight></codeline>
<codeline lineno="443" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aba9e296787aebab711ed212e00949d0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aba9e296787aebab711ed212e00949d0b" kindref="member">kTimerMode</ref>;</highlight></codeline>
<codeline lineno="447" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1af3d0baf8d72c6e4d06151a20e5c7cf28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1af3d0baf8d72c6e4d06151a20e5c7cf28" kindref="member">kTimerConcatenation</ref>;</highlight></codeline>
<codeline lineno="451" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a7a5bdc6991d42febde1eb083d02b8f37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a7a5bdc6991d42febde1eb083d02b8f37" kindref="member">kTrapEnable</ref>;</highlight></codeline>
<codeline lineno="456" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a52151b61c43174186ad7f9dd2e029956" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a52151b61c43174186ad7f9dd2e029956" kindref="member">kTrapSync</ref>;</highlight></codeline>
<codeline lineno="460" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a8f17297f13474a43f91e0d852a8e923a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a8f17297f13474a43f91e0d852a8e923a" kindref="member">kTrapLevel</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="465" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3cd2a400df5899d50b84a9e8f7e89612" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3cd2a400df5899d50b84a9e8f7e89612" kindref="member">kTrapExitControl</ref>;</highlight></codeline>
<codeline lineno="469" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3c2ad8e22c31f9f18ef0e9955f8226b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3c2ad8e22c31f9f18ef0e9955f8226b9" kindref="member">kDitherCompare</ref>;<sp/></highlight></codeline>
<codeline lineno="473" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ad3f1a291e815f2b1705247158ca970d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ad3f1a291e815f2b1705247158ca970d6" kindref="member">kDeadTimePrescalar</ref>;</highlight></codeline>
<codeline lineno="477" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa53828b375290b8d2d2836dfd5914010" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa53828b375290b8d2d2836dfd5914010" kindref="member">kDitherSetting</ref>;</highlight></codeline>
<codeline lineno="482" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a06e92c3c9f06d03674dca35d0d11b70d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a06e92c3c9f06d03674dca35d0d11b70d" kindref="member">ShadowTransfer</ref>;</highlight></codeline>
<codeline lineno="487" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2feeedc6d83a56a7feefa9472132f233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2feeedc6d83a56a7feefa9472132f233" kindref="member">Start</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a615caab4d5dd01607d7ad74caef0f76d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a615caab4d5dd01607d7ad74caef0f76d" kindref="member">StartControl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="495" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a25c14a83b1928f9d081b77cc02a26962" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a25c14a83b1928f9d081b77cc02a26962" kindref="member">kFallingDeadTime</ref>;</highlight></codeline>
<codeline lineno="499" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2abf3fbeb7dcb75ef9d652be1edc89b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2abf3fbeb7dcb75ef9d652be1edc89b0" kindref="member">kRisingDeadTime</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6337571a008830b2b4486853b0cf1497" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6337571a008830b2b4486853b0cf1497" kindref="member">kResolution</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ab752a3fa2fedde91ddd21731fa668afa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ab752a3fa2fedde91ddd21731fa668afa" kindref="member">kCompareValue1</ref>;</highlight></codeline>
<codeline lineno="515" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6c3f0ce3b071e7c3181fcc15789b3554" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6c3f0ce3b071e7c3181fcc15789b3554" kindref="member">kCompareValue2</ref>;</highlight></codeline>
<codeline lineno="519" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a8c4b9667a21b04b93252d183f7520baa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a8c4b9667a21b04b93252d183f7520baa" kindref="member">kCCUPrescalar</ref>;</highlight></codeline>
<codeline lineno="523" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aee2f891a5a2197aee5a5131757229f44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" kindref="member">CCU8PWMLIB_EdgeTriggerType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aee2f891a5a2197aee5a5131757229f44" kindref="member">kStartEdge</ref>;</highlight></codeline>
<codeline lineno="527" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a9c779c5f3f6e2c241906777babd650cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4fa2c5be55f10596656729f75ec486fd" kindref="member">CCU8PWMLIB_EdgeTriggerType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a9c779c5f3f6e2c241906777babd650cd" kindref="member">kStopEdge</ref>;</highlight></codeline>
<codeline lineno="531" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa5d7643ac31c7ff3520a95d90639c497" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa5d7643ac31c7ff3520a95d90639c497" kindref="member">kPeriodVal</ref>;</highlight></codeline>
<codeline lineno="535" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1adae229261924a801df73c9d26549b4a3" refkind="member"><highlight class="normal"><sp/><sp/>CCU8_GLOBAL_TypeDef*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1adae229261924a801df73c9d26549b4a3" kindref="member">CC8yKernRegsPtr</ref>;</highlight></codeline>
<codeline lineno="539" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a4772395a712b2f9fdf601c98c9ed4585" refkind="member"><highlight class="normal"><sp/><sp/>CCU8_CC8_TypeDef*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a4772395a712b2f9fdf601c98c9ed4585" kindref="member">CC8yRegsPtr</ref>;</highlight></codeline>
<codeline lineno="543" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aad1ae0e2a4661d6f51f2881244c12f7d" refkind="member"><highlight class="normal"><sp/><sp/>CCU8_CC8_TypeDef*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aad1ae0e2a4661d6f51f2881244c12f7d" kindref="member">CC8yRegs1Ptr</ref>;</highlight></codeline>
<codeline lineno="547" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ae4bf491628a7979947be2dfbb09eda45" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___dynamic_handle_type" kindref="compound">CCU8PWMLIB_DynamicHandleType</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ae4bf491628a7979947be2dfbb09eda45" kindref="member">DynamicHandleType</ref>;</highlight></codeline>
<codeline lineno="551" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2a1a2b6592fbfb0d84f11c3ebd45cd04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa3791cf49ae71b8680f652e050c7485e" kindref="member">CCU8PWMLIB_CountingModeType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a2a1a2b6592fbfb0d84f11c3ebd45cd04" kindref="member">CountingMode</ref>;</highlight></codeline>
<codeline lineno="555" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a43c0486de2e000795452c14d7cb5415c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5583b3b1760a97eee8ab1d73ce1ec05e" kindref="member">CCU8PWMLIB_ExtStopConfigType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a43c0486de2e000795452c14d7cb5415c" kindref="member">ExtStopConfig</ref>;</highlight></codeline>
<codeline lineno="559" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a362357b3c515139b701257ff6c5007ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e7fc093de614fe487063333bdbcff5c" kindref="member">CCU8PWMLIB_DeadTimeConfType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a362357b3c515139b701257ff6c5007ac" kindref="member">DeadTimeConf</ref>;</highlight></codeline>
<codeline lineno="563" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ab22f49bd4aecc455092ff2c0d91726f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ab0d60b09cde73e1c667bbfe56259b6db" kindref="member">CCU8PWMLIB_CompareModeType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1ab22f49bd4aecc455092ff2c0d91726f8" kindref="member">CompareMode</ref>;</highlight></codeline>
<codeline lineno="567" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a44441a6cdcb71a949f103ce9b569c2f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a13da50eddcbe653998dbc896a3138679" kindref="member">CCU8PWMLIB_ExtStartConfigType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a44441a6cdcb71a949f103ce9b569c2f1" kindref="member">ExtStartConfig</ref>;</highlight></codeline>
<codeline lineno="571" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3dcd09bc9be5ba476eb4fc991299713a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" kindref="member">CCU8PWMLIB_CCUInUseType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a3dcd09bc9be5ba476eb4fc991299713a" kindref="member">FirstSlice</ref>;</highlight></codeline>
<codeline lineno="575" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6fe0b5d2d1d41e3ed18a5aab5f8edab2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a487499fd3f6cf8afbfdeb2ac44faf389" kindref="member">CCU8PWMLIB_CCUInUseType</ref><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a6fe0b5d2d1d41e3ed18a5aab5f8edab2" kindref="member">SecondSlice</ref>;</highlight></codeline>
<codeline lineno="579" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa0d52ec870d8331904c24bde352a927b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1aa0d52ec870d8331904c24bde352a927b" kindref="member">ShadowTransferMask</ref>;</highlight></codeline>
<codeline lineno="583" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a307c9c1cdbe70fc8997a1fa0747c76e5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a307c9c1cdbe70fc8997a1fa0747c76e5" kindref="member">StartMask</ref>;</highlight></codeline>
<codeline lineno="588" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a1c3d82b9c4c6fba9ffe54fb56e43bca4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a1c3d82b9c4c6fba9ffe54fb56e43bca4" kindref="member">InterruptControl</ref>;</highlight></codeline>
<codeline lineno="592" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a108cd7112d78540b9281aa3e8b5de553" refkind="member"><highlight class="normal"><sp/><sp/>CCU8PWMLIB_SetCompareFuncionPtr<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1a108cd7112d78540b9281aa3e8b5de553" kindref="member">SetCompareFuncPtr</ref>;</highlight></codeline>
<codeline lineno="596" refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1add29949dd310df83817c191ff2dca109" refkind="member"><highlight class="normal"><sp/><sp/>CCU8PWMLIB_SetDutyFunctionPtr<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type_1add29949dd310df83817c191ff2dca109" kindref="member">SetDutyFuncPtr</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}<sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>**FUNCTION<sp/>PROTOTYPES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**</highlight></codeline>
<codeline lineno="609"><highlight class="comment">*******************************************************************************/</highlight></codeline>
<codeline lineno="621"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1acde56587fac2fe46810aa92dabc447ea" kindref="member" tooltip="This function is used to initialize the APP. It will configure CCU8_CCy slice registers with the sele...">CCU8PWMLIB_Init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a4ecddd6ee4aeb36a7fce45c7ef5c5d1b" kindref="member" tooltip="This will reset the CCU8_CCy slice registers to default state.">CCU8PWMLIB_Deinit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a94777307d29d38ae1913a6e61b682227" kindref="member" tooltip="This function enables the external start feature.">CCU8PWMLIB_EnableExtStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a93050a5f772bedbfc06ac1dc35383228" kindref="member" tooltip="This function disables the external start feature. This is useful for multiphase PWM app to disable t...">CCU8PWMLIB_DisableExtStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a7891bf50a3d5c1a1b507804768e37ec5" kindref="member" tooltip="This will start the Single Phase PWM with Dead Time APP which will in turn start the CCU8_CCy slice...">CCU8PWMLIB_Start</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1abc09469f26152a097aa1fa6b6002d419" kindref="member" tooltip="This will stop the Single Phase PWM with Dead Time APP which will in turn stop the CCU8_CCy slice...">CCU8PWMLIB_Stop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa24a72f3b51b907657ee4bb47f827ef3" kindref="member" tooltip="This function will modify the duty cycle of the output waveform which will change the pulse width...">CCU8PWMLIB_SetCompare</ref></highlight></codeline>
<codeline lineno="713"><highlight class="normal">(</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Compare1,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Compare2</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a49cce33433a65e7cef915cf8d817d0cc" kindref="member" tooltip="This function will modify the duty cycle of the output waveform which will change the pulse width...">CCU8PWMLIB_SetDutyCycle</ref></highlight></codeline>
<codeline lineno="739"><highlight class="normal">(</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="744"><highlight class="normal">);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a76164cadc4975d4459c71c920a607b81" kindref="member" tooltip="This function will modify the pwm frequency of the output waveform which will change the pulse width...">CCU8PWMLIB_SetPeriod</ref></highlight></codeline>
<codeline lineno="766"><highlight class="normal">(</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>uint32_t<sp/>PwmFreq</highlight></codeline>
<codeline lineno="769"><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a5032e02603e9964e25c608f019446aec" kindref="member" tooltip="This function will modify the pwm frequency and duty cycle of the output waveform which will change t...">CCU8PWMLIB_SetPeriodAndCompare</ref></highlight></codeline>
<codeline lineno="793"><highlight class="normal">(</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>uint32_t<sp/>PwmFreq,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Compare1,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Compare2</highlight></codeline>
<codeline lineno="798"><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a07a310f7ad4b083c26ed3f3500ec4e51" kindref="member" tooltip="This function will modify the pwm frequency of the output waveform  .">CCU8PWMLIB_SetPwmFreq</ref></highlight></codeline>
<codeline lineno="814"><highlight class="normal">(</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PwmFreq</highlight></codeline>
<codeline lineno="817"><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1af6f9534fc93a4c925fa3967393434e78" kindref="member" tooltip="This function will modify the pwm frequency and duty cycle of the output waveform  ...">CCU8PWMLIB_SetPwmFreqAndDutyCycle</ref></highlight></codeline>
<codeline lineno="836"><highlight class="normal">(</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PwmFreq,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="842"><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a446c4bca87183e93d042add320e074e9" kindref="member" tooltip="This will update the timer register value when timer is stopped. This is used to set the starting val...">CCU8PWMLIB_SetTimerVal</ref></highlight></codeline>
<codeline lineno="859"><highlight class="normal">(</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>uint32_t<sp/>TimerVal</highlight></codeline>
<codeline lineno="862"><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a8181e2413754fe2eb1bed2ccbe3019f2" kindref="member" tooltip="This will request the update of the period register, compare register values from the respective shad...">CCU8PWMLIB_SWRequestShadowTransfer</ref></highlight></codeline>
<codeline lineno="883"><highlight class="normal">(</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr</highlight></codeline>
<codeline lineno="885"><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a2ddaedd420e8f58e11bae159c68e0309" kindref="member" tooltip="This function will read the period register value.This will be useful to calculate the compare regist...">CCU8PWMLIB_GetPeriodReg</ref></highlight></codeline>
<codeline lineno="901"><highlight class="normal">(</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>PeriodRegPtr</highlight></codeline>
<codeline lineno="904"><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1abd35873be71367099ee33ce41eba8620" kindref="member" tooltip="This function will reset the trap flag by checking whether trap condition is reset.">CCU8PWMLIB_ResetTrapFlag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a9c439e95123dac92a7e10965c82f7ded" kindref="member" tooltip="This function will read the timer values of compare register and period register.">CCU8PWMLIB_GetTimerRegsVal</ref></highlight></codeline>
<codeline lineno="935"><highlight class="normal">(</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___timer_regs_type" kindref="compound">CCU8PWMLIB_TimerRegsType</ref>*<sp/>TimerRegsPtr</highlight></codeline>
<codeline lineno="938"><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a6600635ff8ad1c97b02b9933dfd1bbd9" kindref="member" tooltip="This function will read the timer status whether timer is running or idle.">CCU8PWMLIB_GetTimerStatus</ref></highlight></codeline>
<codeline lineno="954"><highlight class="normal">(</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/>uint32_t*<sp/>TimerStatusPtr</highlight></codeline>
<codeline lineno="957"><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ace57d26797e3d90dbbea114c004860d5" kindref="member" tooltip="This function will enable the event. This should be called by the user first for interrupt handling...">CCU8PWMLIB_EnableEvent</ref></highlight></codeline>
<codeline lineno="974"><highlight class="normal">(</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref><sp/>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref><sp/>Event</highlight></codeline>
<codeline lineno="977"><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a9f0ef0a5f70a5d3b74d0ac0c710bbf95" kindref="member" tooltip="This function will disable the event.">CCU8PWMLIB_DisableEvent</ref></highlight></codeline>
<codeline lineno="993"><highlight class="normal">(</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref><sp/>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref><sp/>Event</highlight></codeline>
<codeline lineno="996"><highlight class="normal">);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a60a95fcde10d5743d097495230040ce4" kindref="member" tooltip="This function will clear the pending event.">CCU8PWMLIB_ClearPendingEvent</ref></highlight></codeline>
<codeline lineno="1012"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref><sp/>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref><sp/>Event</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a014df50cba8f3c04d2319213d5e7ce0f" kindref="member" tooltip="This function will forcefully set the event.This function should not be called within interrut handle...">CCU8PWMLIB_SetPendingEvent</ref></highlight></codeline>
<codeline lineno="1032"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref><sp/>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref><sp/>Event</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a47c6dc85ff480bbc8b40ca513418d1fd" kindref="member" tooltip="This function will check whether given event is set.">CCU8PWMLIB_GetPendingEvent</ref></highlight></codeline>
<codeline lineno="1052"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_c_u8_p_w_m_l_i_b___handle_type" kindref="compound">CCU8PWMLIB_HandleType</ref><sp/>*<sp/>HandlePtr,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1ad486b9061d575bd23b9e5d9b0e546a82" kindref="member">CCU8PWMLIB_EventNameType</ref><sp/>Event,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>EvtStatus</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0e47d6ac4c62f98cabcecf76491d6cf6" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned asymmetric mode ...">CCU8PWMLIB_SetDutyEdgeAlignAsymmetric</ref></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a09c5d41924e679eb5877381f2c1caa7f" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned symmetric mode i...">CCU8PWMLIB_SetDutyEdgeAlignSymmetric</ref></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a7f4a08a5e9b12756d4562d8d3809dc60" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetDutyCycle when edge aligned symmetric with t...">CCU8PWMLIB_SetDutyEdgeAlignSymmetricTimerConcat</ref></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aa2bb812fa947898e7c818b1ad0ec5e22" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetDutyCycle when center aligned symmetric mode...">CCU8PWMLIB_SetDutyCenterAlignSymmetric</ref></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/>HandlePtr,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a6625f24c861287aba1a3708dfb87bc36" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetDutyCycle when center aligned symmetric mode...">CCU8PWMLIB_SetDutyCenterAlignAsymmetric</ref></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/>HandlePtr,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DutyCycle,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>uint32_t<sp/>Shift,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Sign</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1aec416744f840649c750354c7c0e53bc7" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetCompare when asymmetric mode is selected...">CCU8PWMLIB_SetCompareAsymmetric</ref></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare1,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare2</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a0be185dbb95298cbd3e87c8f80346a44" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetCompare when symmetric mode is selected...">CCU8PWMLIB_SetCompareSymmetric</ref></highlight></codeline>
<codeline lineno="1167"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare1,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare2</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal">status_t<sp/><ref refid="_c_c_u8_p_w_m_l_i_b_8h_1a3c237e97e9048621f6db7e938997abdc" kindref="member" tooltip="This function will be internally called by CCU8PWMLIB_SetCompare when edge-aligned symmetric mode wit...">CCU8PWMLIB_SetCompareEdgeAlignSymmetricTimerConcat</ref></highlight></codeline>
<codeline lineno="1182"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HdlPtr,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare1,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Compare2</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1194"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CCU8PWMLIB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Dave/Generated/inc/LIBS/CCU8PWMLIB.h"/>
  </compounddef>
</doxygen>
