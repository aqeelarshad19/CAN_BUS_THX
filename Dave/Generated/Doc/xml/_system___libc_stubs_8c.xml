<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_system___libc_stubs_8c" kind="file">
    <compoundname>System_LibcStubs.c</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>      XMC4000 Device Series
</verbatim> <simplesect kind="version"><para>V1.3 </para></simplesect>
<simplesect kind="date"><para>Jan 2014</para></simplesect>
Copyright (C) 2012-2014 Infineon Technologies AG. All rights reserved.</para><para><simplesect kind="par"><title></title><para>Infineon Technologies AG (Infineon) is supplying this software for use with Infineon&apos;s microcontrollers. This file can be freely distributed within development tools that are supporting such microcontrollers.</para></simplesect>
<simplesect kind="par"><title></title><para>THIS SOFTWARE IS PROVIDED AS IS. NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/****************************************************************************/</highlight></codeline>
<codeline lineno="25"><highlight class="comment">/*<sp/>============================<sp/>REVISION<sp/>HISTORY<sp/>==============================</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>1.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian<sp/>,<sp/>V0.1<sp/>,<sp/>Initial<sp/>draft</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>2.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian<sp/>,<sp/>V0.2<sp/>,<sp/>Label<sp/>updates</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian<sp/>,<sp/>V1.0<sp/>,<sp/>Made<sp/>_Sbrk<sp/>device<sp/>agnostic</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian<sp/>,<sp/>V1.1<sp/>,<sp/>C++<sp/>support</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>3.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian<sp/>,<sp/>V1.2<sp/>,<sp/>Restored<sp/>compatibilty<sp/>with<sp/>old</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>project<sp/>files</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>4.<sp/>Prakash<sp/>Kalanjeri<sp/>Balasubramanian,<sp/>V1.3<sp/>,<sp/><sp/>Encapsulating<sp/>everything<sp/>in</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>file<sp/>for<sp/>use<sp/>only<sp/>with</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GCC</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>stubs<sp/>for<sp/>standard<sp/>C<sp/>library<sp/>functionality<sp/>that<sp/>must</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>typically<sp/>be<sp/>provided<sp/>for<sp/>the<sp/>underlying<sp/>platform.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>All<sp/>routines<sp/>are<sp/>WEAKLY<sp/>defined.<sp/>This<sp/>creates<sp/>an<sp/>opportunity<sp/>for<sp/>application</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>developers<sp/>to<sp/>override<sp/>the<sp/>provided<sp/>implementation<sp/>and<sp/>define<sp/>a<sp/>final</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>implementation<sp/>for<sp/>their<sp/>platforms.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/times.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===========================<sp/>File<sp/>I/O<sp/>related<sp/>============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>File<sp/>open</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_open(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/>flags<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/>mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>File<sp/>position<sp/>seek</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_lseek(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/>file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/>offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/>whence<sp/>=<sp/>whence;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>File<sp/>read</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_read(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/>file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/>len<sp/><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>File<sp/>write</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_write(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbytes)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>File<sp/>close</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_close(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>File<sp/>status</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_fstat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file,<sp/>struct<sp/>stat<sp/>*st)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/>file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>File<sp/>linking</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_link<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*old,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old<sp/>==<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Unlinking<sp/>directory<sp/>entry</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_unlink(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===================<sp/>Dynamic<sp/>memory<sp/>management<sp/>related<sp/>===================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>Heap<sp/>break<sp/>(position)</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">__attribute__((weak))<sp/>void<sp/>*_sbrk(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RequestedSize)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Heap<sp/>limits<sp/>from<sp/>linker<sp/>script<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Heap_Bank1_Start;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Heap_Bank1_Size;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CurrBreak,<sp/>*NextBreak;<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>HeapSize;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*HeapBound;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>heap=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/>HeapSize<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(&amp;Heap_Bank1_Size);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>this<sp/>is<sp/>the<sp/>first<sp/>time<sp/>malloc()<sp/>was<sp/>invoked,<sp/>we<sp/>start<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>*<sp/>begining<sp/>of<sp/>the<sp/>heap.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(heap<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>heap<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;Heap_Bank1_Start;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>HeapBound<sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(heap<sp/>+<sp/>HeapSize);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Super<sp/>duper<sp/>algo<sp/>to<sp/>find<sp/>out<sp/>if<sp/>we<sp/>have<sp/>memory<sp/>for<sp/>the<sp/>latest<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Given<sp/>conditions<sp/>are:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>1.<sp/>Latest<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/>CurrBreak<sp/>=<sp/>heap;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>2.<sp/>Potential<sp/>break<sp/>based<sp/>on<sp/>requested<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/>NextBreak<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)(<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(heap))<sp/>+<sp/>RequestedSize<sp/>+<sp/>7)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>0xFFFFFFF8);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>no<sp/>memory<sp/>condition<sp/>if<sp/>we<sp/>sense<sp/>we<sp/>are<sp/>crossing<sp/>the<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NextBreak<sp/>&gt;=<sp/><sp/>HeapBound<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)NULL);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>heap<sp/>=<sp/>NextBreak;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CurrBreak;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>======================<sp/>Process<sp/>related<sp/>==================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>Process<sp/>timing<sp/>information</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_times(struct<sp/>tms<sp/>*buf)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Waiting<sp/>for<sp/>a<sp/>child<sp/>process<sp/>to<sp/>complete</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_wait(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*status)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>Kill<sp/>a<sp/>process</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_kill(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/>pid<sp/>=<sp/>pid;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/>sig<sp/>=<sp/>sig;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>Forking<sp/>a<sp/>child<sp/>process</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_fork(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Process<sp/>ID</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_getpid(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>Program/process<sp/>exit</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">__attribute__((weak))<sp/>void<sp/>_exit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/>rc<sp/>=<sp/>rc;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">__attribute__((weak))<sp/>void<sp/>_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=======================<sp/>TERMIO<sp/>related<sp/>==================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>Terminal<sp/>type<sp/>evaluation</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">__attribute__((weak))<sp/>int<sp/>_isatty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/>file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=================================<sp/>C++<sp/>===================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__dso_handle<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__GNUC__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/DAVE3_workspace/ws3.1.10/CAN_BUS_THX/Lib/System_LibcStubs.c"/>
  </compounddef>
</doxygen>
